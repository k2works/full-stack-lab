/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _src_style_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/style.css */ \"./src/style.css\");\n/* harmony import */ var _src_lib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/lib */ \"./src/lib.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (_src_lib__WEBPACK_IMPORTED_MODULE_1__.render);\n\n//# sourceURL=webpack://@k2works/full-stack-lab/./index.js?");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ (function(module) {

"use strict";
eval("\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};\n\n//# sourceURL=webpack://@k2works/full-stack-lab/./node_modules/css-loader/dist/runtime/api.js?");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/
/***/ (function(module) {

"use strict";
eval("\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === \"function\") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    return [content].concat([sourceMapping]).join(\"\\n\");\n  }\n  return [content].join(\"\\n\");\n};\n\n//# sourceURL=webpack://@k2works/full-stack-lab/./node_modules/css-loader/dist/runtime/sourceMaps.js?");

/***/ }),

/***/ "./node_modules/marked/lib/marked.js":
/*!*******************************************!*\
  !*** ./node_modules/marked/lib/marked.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n/**\n * marked - a markdown parser\n * Copyright (c) 2011-2020, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n(function (global, factory) {\n  ( false ? 0 : _typeof(exports)) === 'object' && \"object\" !== 'undefined' ? module.exports = factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : (0);\n})(this, function () {\n  'use strict';\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n  function _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n  }\n  function _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n    return arr2;\n  }\n  function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n    var it;\n    if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n        if (it) o = it;\n        var i = 0;\n        return function () {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        };\n      }\n      throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    it = o[Symbol.iterator]();\n    return it.next.bind(it);\n  }\n  function createCommonjsModule(fn, module) {\n    return module = {\n      exports: {}\n    }, fn(module, module.exports), module.exports;\n  }\n  var defaults = createCommonjsModule(function (module) {\n    function getDefaults() {\n      return {\n        baseUrl: null,\n        breaks: false,\n        gfm: true,\n        headerIds: true,\n        headerPrefix: '',\n        highlight: null,\n        langPrefix: 'language-',\n        mangle: true,\n        pedantic: false,\n        renderer: null,\n        sanitize: false,\n        sanitizer: null,\n        silent: false,\n        smartLists: false,\n        smartypants: false,\n        tokenizer: null,\n        walkTokens: null,\n        xhtml: false\n      };\n    }\n    function changeDefaults(newDefaults) {\n      module.exports.defaults = newDefaults;\n    }\n    module.exports = {\n      defaults: getDefaults(),\n      getDefaults: getDefaults,\n      changeDefaults: changeDefaults\n    };\n  });\n  var defaults_1 = defaults.defaults;\n  var defaults_2 = defaults.getDefaults;\n  var defaults_3 = defaults.changeDefaults;\n\n  /**\n   * Helpers\n   */\n  var escapeTest = /[&<>\"']/;\n  var escapeReplace = /[&<>\"']/g;\n  var escapeTestNoEncode = /[<>\"']|&(?!#?\\w+;)/;\n  var escapeReplaceNoEncode = /[<>\"']|&(?!#?\\w+;)/g;\n  var escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n  };\n  var getEscapeReplacement = function getEscapeReplacement(ch) {\n    return escapeReplacements[ch];\n  };\n  function escape(html, encode) {\n    if (encode) {\n      if (escapeTest.test(html)) {\n        return html.replace(escapeReplace, getEscapeReplacement);\n      }\n    } else {\n      if (escapeTestNoEncode.test(html)) {\n        return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n      }\n    }\n    return html;\n  }\n  var unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n  function unescape(html) {\n    // explicitly match decimal, hex, and named HTML entities\n    return html.replace(unescapeTest, function (_, n) {\n      n = n.toLowerCase();\n      if (n === 'colon') return ':';\n      if (n.charAt(0) === '#') {\n        return n.charAt(1) === 'x' ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));\n      }\n      return '';\n    });\n  }\n  var caret = /(^|[^\\[])\\^/g;\n  function edit(regex, opt) {\n    regex = regex.source || regex;\n    opt = opt || '';\n    var obj = {\n      replace: function replace(name, val) {\n        val = val.source || val;\n        val = val.replace(caret, '$1');\n        regex = regex.replace(name, val);\n        return obj;\n      },\n      getRegex: function getRegex() {\n        return new RegExp(regex, opt);\n      }\n    };\n    return obj;\n  }\n  var nonWordAndColonTest = /[^\\w:]/g;\n  var originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n  function cleanUrl(sanitize, base, href) {\n    if (sanitize) {\n      var prot;\n      try {\n        prot = decodeURIComponent(unescape(href)).replace(nonWordAndColonTest, '').toLowerCase();\n      } catch (e) {\n        return null;\n      }\n      if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n        return null;\n      }\n    }\n    if (base && !originIndependentUrl.test(href)) {\n      href = resolveUrl(base, href);\n    }\n    try {\n      href = encodeURI(href).replace(/%25/g, '%');\n    } catch (e) {\n      return null;\n    }\n    return href;\n  }\n  var baseUrls = {};\n  var justDomain = /^[^:]+:\\/*[^/]*$/;\n  var protocol = /^([^:]+:)[\\s\\S]*$/;\n  var domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n  function resolveUrl(base, href) {\n    if (!baseUrls[' ' + base]) {\n      // we can ignore everything in base after the last slash of its path component,\n      // but we might need to add _that_\n      // https://tools.ietf.org/html/rfc3986#section-3\n      if (justDomain.test(base)) {\n        baseUrls[' ' + base] = base + '/';\n      } else {\n        baseUrls[' ' + base] = rtrim(base, '/', true);\n      }\n    }\n    base = baseUrls[' ' + base];\n    var relativeBase = base.indexOf(':') === -1;\n    if (href.substring(0, 2) === '//') {\n      if (relativeBase) {\n        return href;\n      }\n      return base.replace(protocol, '$1') + href;\n    } else if (href.charAt(0) === '/') {\n      if (relativeBase) {\n        return href;\n      }\n      return base.replace(domain, '$1') + href;\n    } else {\n      return base + href;\n    }\n  }\n  var noopTest = {\n    exec: function noopTest() {}\n  };\n  function merge(obj) {\n    var i = 1,\n      target,\n      key;\n    for (; i < arguments.length; i++) {\n      target = arguments[i];\n      for (key in target) {\n        if (Object.prototype.hasOwnProperty.call(target, key)) {\n          obj[key] = target[key];\n        }\n      }\n    }\n    return obj;\n  }\n  function splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    var row = tableRow.replace(/\\|/g, function (match, offset, str) {\n        var escaped = false,\n          curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\') {\n          escaped = !escaped;\n        }\n        if (escaped) {\n          // odd number of slashes means | is escaped\n          // so we leave it alone\n          return '|';\n        } else {\n          // add space before unescaped |\n          return ' |';\n        }\n      }),\n      cells = row.split(/ \\|/);\n    var i = 0;\n    if (cells.length > count) {\n      cells.splice(count);\n    } else {\n      while (cells.length < count) {\n        cells.push('');\n      }\n    }\n    for (; i < cells.length; i++) {\n      // leading or trailing whitespace is ignored per the gfm spec\n      cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n    }\n    return cells;\n  } // Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n  // /c*$/ is vulnerable to REDOS.\n  // invert: Remove suffix of non-c chars instead. Default falsey.\n\n  function rtrim(str, c, invert) {\n    var l = str.length;\n    if (l === 0) {\n      return '';\n    } // Length of suffix matching the invert condition.\n\n    var suffLen = 0; // Step left until we fail to match the invert condition.\n\n    while (suffLen < l) {\n      var currChar = str.charAt(l - suffLen - 1);\n      if (currChar === c && !invert) {\n        suffLen++;\n      } else if (currChar !== c && invert) {\n        suffLen++;\n      } else {\n        break;\n      }\n    }\n    return str.substr(0, l - suffLen);\n  }\n  function findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n      return -1;\n    }\n    var l = str.length;\n    var level = 0,\n      i = 0;\n    for (; i < l; i++) {\n      if (str[i] === '\\\\') {\n        i++;\n      } else if (str[i] === b[0]) {\n        level++;\n      } else if (str[i] === b[1]) {\n        level--;\n        if (level < 0) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  }\n  function checkSanitizeDeprecation(opt) {\n    if (opt && opt.sanitize && !opt.silent) {\n      console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n    }\n  } // copied from https://stackoverflow.com/a/5450113/806777\n\n  function repeatString(pattern, count) {\n    if (count < 1) {\n      return '';\n    }\n    var result = '';\n    while (count > 1) {\n      if (count & 1) {\n        result += pattern;\n      }\n      count >>= 1;\n      pattern += pattern;\n    }\n    return result + pattern;\n  }\n  var helpers = {\n    escape: escape,\n    unescape: unescape,\n    edit: edit,\n    cleanUrl: cleanUrl,\n    resolveUrl: resolveUrl,\n    noopTest: noopTest,\n    merge: merge,\n    splitCells: splitCells,\n    rtrim: rtrim,\n    findClosingBracket: findClosingBracket,\n    checkSanitizeDeprecation: checkSanitizeDeprecation,\n    repeatString: repeatString\n  };\n  var defaults$1 = defaults.defaults;\n  var rtrim$1 = helpers.rtrim,\n    splitCells$1 = helpers.splitCells,\n    _escape = helpers.escape,\n    findClosingBracket$1 = helpers.findClosingBracket;\n  function outputLink(cap, link, raw) {\n    var href = link.href;\n    var title = link.title ? _escape(link.title) : null;\n    var text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n    if (cap[0].charAt(0) !== '!') {\n      return {\n        type: 'link',\n        raw: raw,\n        href: href,\n        title: title,\n        text: text\n      };\n    } else {\n      return {\n        type: 'image',\n        raw: raw,\n        href: href,\n        title: title,\n        text: _escape(text)\n      };\n    }\n  }\n  function indentCodeCompensation(raw, text) {\n    var matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n    if (matchIndentToCode === null) {\n      return text;\n    }\n    var indentToCode = matchIndentToCode[1];\n    return text.split('\\n').map(function (node) {\n      var matchIndentInNode = node.match(/^\\s+/);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n      var indentInNode = matchIndentInNode[0];\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n      return node;\n    }).join('\\n');\n  }\n  /**\n   * Tokenizer\n   */\n\n  var Tokenizer_1 = /*#__PURE__*/function () {\n    function Tokenizer(options) {\n      this.options = options || defaults$1;\n    }\n    var _proto = Tokenizer.prototype;\n    _proto.space = function space(src) {\n      var cap = this.rules.block.newline.exec(src);\n      if (cap) {\n        if (cap[0].length > 1) {\n          return {\n            type: 'space',\n            raw: cap[0]\n          };\n        }\n        return {\n          raw: '\\n'\n        };\n      }\n    };\n    _proto.code = function code(src, tokens) {\n      var cap = this.rules.block.code.exec(src);\n      if (cap) {\n        var lastToken = tokens[tokens.length - 1]; // An indented code block cannot interrupt a paragraph.\n\n        if (lastToken && lastToken.type === 'paragraph') {\n          return {\n            raw: cap[0],\n            text: cap[0].trimRight()\n          };\n        }\n        var text = cap[0].replace(/^ {4}/gm, '');\n        return {\n          type: 'code',\n          raw: cap[0],\n          codeBlockStyle: 'indented',\n          text: !this.options.pedantic ? rtrim$1(text, '\\n') : text\n        };\n      }\n    };\n    _proto.fences = function fences(src) {\n      var cap = this.rules.block.fences.exec(src);\n      if (cap) {\n        var raw = cap[0];\n        var text = indentCodeCompensation(raw, cap[3] || '');\n        return {\n          type: 'code',\n          raw: raw,\n          lang: cap[2] ? cap[2].trim() : cap[2],\n          text: text\n        };\n      }\n    };\n    _proto.heading = function heading(src) {\n      var cap = this.rules.block.heading.exec(src);\n      if (cap) {\n        return {\n          type: 'heading',\n          raw: cap[0],\n          depth: cap[1].length,\n          text: cap[2]\n        };\n      }\n    };\n    _proto.nptable = function nptable(src) {\n      var cap = this.rules.block.nptable.exec(src);\n      if (cap) {\n        var item = {\n          type: 'table',\n          header: splitCells$1(cap[1].replace(/^ *| *\\| *$/g, '')),\n          align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n          cells: cap[3] ? cap[3].replace(/\\n$/, '').split('\\n') : [],\n          raw: cap[0]\n        };\n        if (item.header.length === item.align.length) {\n          var l = item.align.length;\n          var i;\n          for (i = 0; i < l; i++) {\n            if (/^ *-+: *$/.test(item.align[i])) {\n              item.align[i] = 'right';\n            } else if (/^ *:-+: *$/.test(item.align[i])) {\n              item.align[i] = 'center';\n            } else if (/^ *:-+ *$/.test(item.align[i])) {\n              item.align[i] = 'left';\n            } else {\n              item.align[i] = null;\n            }\n          }\n          l = item.cells.length;\n          for (i = 0; i < l; i++) {\n            item.cells[i] = splitCells$1(item.cells[i], item.header.length);\n          }\n          return item;\n        }\n      }\n    };\n    _proto.hr = function hr(src) {\n      var cap = this.rules.block.hr.exec(src);\n      if (cap) {\n        return {\n          type: 'hr',\n          raw: cap[0]\n        };\n      }\n    };\n    _proto.blockquote = function blockquote(src) {\n      var cap = this.rules.block.blockquote.exec(src);\n      if (cap) {\n        var text = cap[0].replace(/^ *> ?/gm, '');\n        return {\n          type: 'blockquote',\n          raw: cap[0],\n          text: text\n        };\n      }\n    };\n    _proto.list = function list(src) {\n      var cap = this.rules.block.list.exec(src);\n      if (cap) {\n        var raw = cap[0];\n        var bull = cap[2];\n        var isordered = bull.length > 1;\n        var isparen = bull[bull.length - 1] === ')';\n        var list = {\n          type: 'list',\n          raw: raw,\n          ordered: isordered,\n          start: isordered ? +bull.slice(0, -1) : '',\n          loose: false,\n          items: []\n        }; // Get each top-level item.\n\n        var itemMatch = cap[0].match(this.rules.block.item);\n        var next = false,\n          item,\n          space,\n          b,\n          addBack,\n          loose,\n          istask,\n          ischecked;\n        var l = itemMatch.length;\n        for (var i = 0; i < l; i++) {\n          item = itemMatch[i];\n          raw = item; // Remove the list item's bullet\n          // so it is seen as the next token.\n\n          space = item.length;\n          item = item.replace(/^ *([*+-]|\\d+[.)]) ?/, ''); // Outdent whatever the\n          // list item contains. Hacky.\n\n          if (~item.indexOf('\\n ')) {\n            space -= item.length;\n            item = !this.options.pedantic ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '') : item.replace(/^ {1,4}/gm, '');\n          } // Determine whether the next list item belongs here.\n          // Backpedal if it does not belong in this list.\n\n          if (i !== l - 1) {\n            b = this.rules.block.bullet.exec(itemMatch[i + 1])[0];\n            if (isordered ? b.length === 1 || !isparen && b[b.length - 1] === ')' : b.length > 1 || this.options.smartLists && b !== bull) {\n              addBack = itemMatch.slice(i + 1).join('\\n');\n              list.raw = list.raw.substring(0, list.raw.length - addBack.length);\n              i = l - 1;\n            }\n          } // Determine whether item is loose or not.\n          // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n          // for discount behavior.\n\n          loose = next || /\\n\\n(?!\\s*$)/.test(item);\n          if (i !== l - 1) {\n            next = item.charAt(item.length - 1) === '\\n';\n            if (!loose) loose = next;\n          }\n          if (loose) {\n            list.loose = true;\n          } // Check for task list items\n\n          istask = /^\\[[ xX]\\] /.test(item);\n          ischecked = undefined;\n          if (istask) {\n            ischecked = item[1] !== ' ';\n            item = item.replace(/^\\[[ xX]\\] +/, '');\n          }\n          list.items.push({\n            type: 'list_item',\n            raw: raw,\n            task: istask,\n            checked: ischecked,\n            loose: loose,\n            text: item\n          });\n        }\n        return list;\n      }\n    };\n    _proto.html = function html(src) {\n      var cap = this.rules.block.html.exec(src);\n      if (cap) {\n        return {\n          type: this.options.sanitize ? 'paragraph' : 'html',\n          raw: cap[0],\n          pre: !this.options.sanitizer && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n          text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]) : cap[0]\n        };\n      }\n    };\n    _proto.def = function def(src) {\n      var cap = this.rules.block.def.exec(src);\n      if (cap) {\n        if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);\n        var tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n        return {\n          tag: tag,\n          raw: cap[0],\n          href: cap[2],\n          title: cap[3]\n        };\n      }\n    };\n    _proto.table = function table(src) {\n      var cap = this.rules.block.table.exec(src);\n      if (cap) {\n        var item = {\n          type: 'table',\n          header: splitCells$1(cap[1].replace(/^ *| *\\| *$/g, '')),\n          align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n          cells: cap[3] ? cap[3].replace(/\\n$/, '').split('\\n') : []\n        };\n        if (item.header.length === item.align.length) {\n          item.raw = cap[0];\n          var l = item.align.length;\n          var i;\n          for (i = 0; i < l; i++) {\n            if (/^ *-+: *$/.test(item.align[i])) {\n              item.align[i] = 'right';\n            } else if (/^ *:-+: *$/.test(item.align[i])) {\n              item.align[i] = 'center';\n            } else if (/^ *:-+ *$/.test(item.align[i])) {\n              item.align[i] = 'left';\n            } else {\n              item.align[i] = null;\n            }\n          }\n          l = item.cells.length;\n          for (i = 0; i < l; i++) {\n            item.cells[i] = splitCells$1(item.cells[i].replace(/^ *\\| *| *\\| *$/g, ''), item.header.length);\n          }\n          return item;\n        }\n      }\n    };\n    _proto.lheading = function lheading(src) {\n      var cap = this.rules.block.lheading.exec(src);\n      if (cap) {\n        return {\n          type: 'heading',\n          raw: cap[0],\n          depth: cap[2].charAt(0) === '=' ? 1 : 2,\n          text: cap[1]\n        };\n      }\n    };\n    _proto.paragraph = function paragraph(src) {\n      var cap = this.rules.block.paragraph.exec(src);\n      if (cap) {\n        return {\n          type: 'paragraph',\n          raw: cap[0],\n          text: cap[1].charAt(cap[1].length - 1) === '\\n' ? cap[1].slice(0, -1) : cap[1]\n        };\n      }\n    };\n    _proto.text = function text(src, tokens) {\n      var cap = this.rules.block.text.exec(src);\n      if (cap) {\n        var lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          return {\n            raw: cap[0],\n            text: cap[0]\n          };\n        }\n        return {\n          type: 'text',\n          raw: cap[0],\n          text: cap[0]\n        };\n      }\n    };\n    _proto.escape = function escape(src) {\n      var cap = this.rules.inline.escape.exec(src);\n      if (cap) {\n        return {\n          type: 'escape',\n          raw: cap[0],\n          text: _escape(cap[1])\n        };\n      }\n    };\n    _proto.tag = function tag(src, inLink, inRawBlock) {\n      var cap = this.rules.inline.tag.exec(src);\n      if (cap) {\n        if (!inLink && /^<a /i.test(cap[0])) {\n          inLink = true;\n        } else if (inLink && /^<\\/a>/i.test(cap[0])) {\n          inLink = false;\n        }\n        if (!inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n          inRawBlock = true;\n        } else if (inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n          inRawBlock = false;\n        }\n        return {\n          type: this.options.sanitize ? 'text' : 'html',\n          raw: cap[0],\n          inLink: inLink,\n          inRawBlock: inRawBlock,\n          text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]) : cap[0]\n        };\n      }\n    };\n    _proto.link = function link(src) {\n      var cap = this.rules.inline.link.exec(src);\n      if (cap) {\n        var lastParenIndex = findClosingBracket$1(cap[2], '()');\n        if (lastParenIndex > -1) {\n          var start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          var linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n        var href = cap[2];\n        var title = '';\n        if (this.options.pedantic) {\n          var link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n          if (link) {\n            href = link[1];\n            title = link[3];\n          } else {\n            title = '';\n          }\n        } else {\n          title = cap[3] ? cap[3].slice(1, -1) : '';\n        }\n        href = href.trim().replace(/^<([\\s\\S]*)>$/, '$1');\n        var token = outputLink(cap, {\n          href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n          title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n        }, cap[0]);\n        return token;\n      }\n    };\n    _proto.reflink = function reflink(src, links) {\n      var cap;\n      if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {\n        var link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n        link = links[link.toLowerCase()];\n        if (!link || !link.href) {\n          var text = cap[0].charAt(0);\n          return {\n            type: 'text',\n            raw: text,\n            text: text\n          };\n        }\n        var token = outputLink(cap, link, cap[0]);\n        return token;\n      }\n    };\n    _proto.strong = function strong(src, maskedSrc, prevChar) {\n      if (prevChar === void 0) {\n        prevChar = '';\n      }\n      var match = this.rules.inline.strong.start.exec(src);\n      if (match && (!match[1] || match[1] && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar)))) {\n        maskedSrc = maskedSrc.slice(-1 * src.length);\n        var endReg = match[0] === '**' ? this.rules.inline.strong.endAst : this.rules.inline.strong.endUnd;\n        endReg.lastIndex = 0;\n        var cap;\n        while ((match = endReg.exec(maskedSrc)) != null) {\n          cap = this.rules.inline.strong.middle.exec(maskedSrc.slice(0, match.index + 3));\n          if (cap) {\n            return {\n              type: 'strong',\n              raw: src.slice(0, cap[0].length),\n              text: src.slice(2, cap[0].length - 2)\n            };\n          }\n        }\n      }\n    };\n    _proto.em = function em(src, maskedSrc, prevChar) {\n      if (prevChar === void 0) {\n        prevChar = '';\n      }\n      var match = this.rules.inline.em.start.exec(src);\n      if (match && (!match[1] || match[1] && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar)))) {\n        maskedSrc = maskedSrc.slice(-1 * src.length);\n        var endReg = match[0] === '*' ? this.rules.inline.em.endAst : this.rules.inline.em.endUnd;\n        endReg.lastIndex = 0;\n        var cap;\n        while ((match = endReg.exec(maskedSrc)) != null) {\n          cap = this.rules.inline.em.middle.exec(maskedSrc.slice(0, match.index + 2));\n          if (cap) {\n            return {\n              type: 'em',\n              raw: src.slice(0, cap[0].length),\n              text: src.slice(1, cap[0].length - 1)\n            };\n          }\n        }\n      }\n    };\n    _proto.codespan = function codespan(src) {\n      var cap = this.rules.inline.code.exec(src);\n      if (cap) {\n        var text = cap[2].replace(/\\n/g, ' ');\n        var hasNonSpaceChars = /[^ ]/.test(text);\n        var hasSpaceCharsOnBothEnds = text.startsWith(' ') && text.endsWith(' ');\n        if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n          text = text.substring(1, text.length - 1);\n        }\n        text = _escape(text, true);\n        return {\n          type: 'codespan',\n          raw: cap[0],\n          text: text\n        };\n      }\n    };\n    _proto.br = function br(src) {\n      var cap = this.rules.inline.br.exec(src);\n      if (cap) {\n        return {\n          type: 'br',\n          raw: cap[0]\n        };\n      }\n    };\n    _proto.del = function del(src) {\n      var cap = this.rules.inline.del.exec(src);\n      if (cap) {\n        return {\n          type: 'del',\n          raw: cap[0],\n          text: cap[1]\n        };\n      }\n    };\n    _proto.autolink = function autolink(src, mangle) {\n      var cap = this.rules.inline.autolink.exec(src);\n      if (cap) {\n        var text, href;\n        if (cap[2] === '@') {\n          text = _escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n          href = 'mailto:' + text;\n        } else {\n          text = _escape(cap[1]);\n          href = text;\n        }\n        return {\n          type: 'link',\n          raw: cap[0],\n          text: text,\n          href: href,\n          tokens: [{\n            type: 'text',\n            raw: text,\n            text: text\n          }]\n        };\n      }\n    };\n    _proto.url = function url(src, mangle) {\n      var cap;\n      if (cap = this.rules.inline.url.exec(src)) {\n        var text, href;\n        if (cap[2] === '@') {\n          text = _escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n          href = 'mailto:' + text;\n        } else {\n          // do extended autolink path validation\n          var prevCapZero;\n          do {\n            prevCapZero = cap[0];\n            cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n          } while (prevCapZero !== cap[0]);\n          text = _escape(cap[0]);\n          if (cap[1] === 'www.') {\n            href = 'http://' + text;\n          } else {\n            href = text;\n          }\n        }\n        return {\n          type: 'link',\n          raw: cap[0],\n          text: text,\n          href: href,\n          tokens: [{\n            type: 'text',\n            raw: text,\n            text: text\n          }]\n        };\n      }\n    };\n    _proto.inlineText = function inlineText(src, inRawBlock, smartypants) {\n      var cap = this.rules.inline.text.exec(src);\n      if (cap) {\n        var text;\n        if (inRawBlock) {\n          text = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]) : cap[0];\n        } else {\n          text = _escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n        }\n        return {\n          type: 'text',\n          raw: cap[0],\n          text: text\n        };\n      }\n    };\n    return Tokenizer;\n  }();\n  var noopTest$1 = helpers.noopTest,\n    edit$1 = helpers.edit,\n    merge$1 = helpers.merge;\n  /**\n   * Block-Level Grammar\n   */\n\n  var block = {\n    newline: /^\\n+/,\n    code: /^( {4}[^\\n]+\\n*)+/,\n    fences: /^ {0,3}(`{3,}(?=[^`\\n]*\\n)|~{3,})([^\\n]*)\\n(?:|([\\s\\S]*?)\\n)(?: {0,3}\\1[~`]* *(?:\\n+|$)|$)/,\n    hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)/,\n    heading: /^ {0,3}(#{1,6}) +([^\\n]*?)(?: +#+)? *(?:\\n+|$)/,\n    blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n    list: /^( {0,3})(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,\n    html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (6)\n    + '|<(?!script|pre|style)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (7) open tag\n    + '|</(?!script|pre|style)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (7) closing tag\n    + ')',\n    def: /^ {0,3}\\[(label)\\]: *\\n? *<?([^\\s>]+)>?(?:(?: +\\n? *| *\\n *)(title))? *(?:\\n+|$)/,\n    nptable: noopTest$1,\n    table: noopTest$1,\n    lheading: /^([^\\n]+)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    // regex template, placeholders will be replaced according to different paragraph\n    // interruption rules of commonmark and the original markdown spec:\n    _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html)[^\\n]+)*)/,\n    text: /^[^\\n]+/\n  };\n  block._label = /(?!\\s*\\])(?:\\\\[\\[\\]]|[^\\[\\]])+/;\n  block._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\n  block.def = edit$1(block.def).replace('label', block._label).replace('title', block._title).getRegex();\n  block.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\n  block.item = /^( *)(bull) ?[^\\n]*(?:\\n(?!\\1bull ?)[^\\n]*)*/;\n  block.item = edit$1(block.item, 'gm').replace(/bull/g, block.bullet).getRegex();\n  block.list = edit$1(block.list).replace(/bull/g, block.bullet).replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))').replace('def', '\\\\n+(?=' + block.def.source + ')').getRegex();\n  block._tag = 'address|article|aside|base|basefont|blockquote|body|caption' + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption' + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe' + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option' + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr' + '|track|ul';\n  block._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\n  block.html = edit$1(block.html, 'i').replace('comment', block._comment).replace('tag', block._tag).replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex();\n  block.paragraph = edit$1(block._paragraph).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|!--)').replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n  block.blockquote = edit$1(block.blockquote).replace('paragraph', block.paragraph).getRegex();\n  /**\n   * Normal Block Grammar\n   */\n\n  block.normal = merge$1({}, block);\n  /**\n   * GFM Block Grammar\n   */\n\n  block.gfm = merge$1({}, block.normal, {\n    nptable: '^ *([^|\\\\n ].*\\\\|.*)\\\\n' // Header\n    + ' {0,3}([-:]+ *\\\\|[-| :]*)' // Align\n    + '(?:\\\\n((?:(?!\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)',\n    // Cells\n    table: '^ *\\\\|(.+)\\\\n' // Header\n    + ' {0,3}\\\\|?( *[-:]+[-| :]*)' // Align\n    + '(?:\\\\n *((?:(?!\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n  });\n\n  block.gfm.nptable = edit$1(block.gfm.nptable).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('blockquote', ' {0,3}>').replace('code', ' {4}[^\\\\n]').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|!--)').replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n  block.gfm.table = edit$1(block.gfm.table).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('blockquote', ' {0,3}>').replace('code', ' {4}[^\\\\n]').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|!--)').replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n  /**\n   * Pedantic grammar (original John Gruber's loose markdown specification)\n   */\n\n  block.pedantic = merge$1({}, block.normal, {\n    html: edit$1('^ *(?:comment *(?:\\\\n|\\\\s*$)' + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))').replace('comment', block._comment).replace(/tag/g, '(?!(?:' + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub' + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)' + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b').getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^ *(#{1,6}) *([^\\n]+?) *(?:#+ *)?(?:\\n+|$)/,\n    fences: noopTest$1,\n    // fences not supported\n    paragraph: edit$1(block.normal._paragraph).replace('hr', block.hr).replace('heading', ' *#{1,6} *[^\\n]').replace('lheading', block.lheading).replace('blockquote', ' {0,3}>').replace('|fences', '').replace('|list', '').replace('|html', '').getRegex()\n  });\n  /**\n   * Inline-Level Grammar\n   */\n\n  var inline = {\n    escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n    autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n    url: noopTest$1,\n    tag: '^comment' + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>',\n    // CDATA section\n    link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n    reflink: /^!?\\[(label)\\]\\[(?!\\s*\\])((?:\\\\[\\[\\]]?|[^\\[\\]\\\\])+)\\]/,\n    nolink: /^!?\\[(?!\\s*\\])((?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]|[^\\[\\]])*)\\](?:\\[\\])?/,\n    reflinkSearch: 'reflink|nolink(?!\\\\()',\n    strong: {\n      start: /^(?:(\\*\\*(?=[*punctuation]))|\\*\\*)(?![\\s])|__/,\n      // (1) returns if starts w/ punctuation\n      middle: /^\\*\\*(?:(?:(?!overlapSkip)(?:[^*]|\\\\\\*)|overlapSkip)|\\*(?:(?!overlapSkip)(?:[^*]|\\\\\\*)|overlapSkip)*?\\*)+?\\*\\*$|^__(?![\\s])((?:(?:(?!overlapSkip)(?:[^_]|\\\\_)|overlapSkip)|_(?:(?!overlapSkip)(?:[^_]|\\\\_)|overlapSkip)*?_)+?)__$/,\n      endAst: /[^punctuation\\s]\\*\\*(?!\\*)|[punctuation]\\*\\*(?!\\*)(?:(?=[punctuation_\\s]|$))/,\n      // last char can't be punct, or final * must also be followed by punct (or endline)\n      endUnd: /[^\\s]__(?!_)(?:(?=[punctuation*\\s])|$)/ // last char can't be a space, and final _ must preceed punct or \\s (or endline)\n    },\n\n    em: {\n      start: /^(?:(\\*(?=[punctuation]))|\\*)(?![*\\s])|_/,\n      // (1) returns if starts w/ punctuation\n      middle: /^\\*(?:(?:(?!overlapSkip)(?:[^*]|\\\\\\*)|overlapSkip)|\\*(?:(?!overlapSkip)(?:[^*]|\\\\\\*)|overlapSkip)*?\\*)+?\\*$|^_(?![_\\s])(?:(?:(?!overlapSkip)(?:[^_]|\\\\_)|overlapSkip)|_(?:(?!overlapSkip)(?:[^_]|\\\\_)|overlapSkip)*?_)+?_$/,\n      endAst: /[^punctuation\\s]\\*(?!\\*)|[punctuation]\\*(?!\\*)(?:(?=[punctuation_\\s]|$))/,\n      // last char can't be punct, or final * must also be followed by punct (or endline)\n      endUnd: /[^\\s]_(?!_)(?:(?=[punctuation*\\s])|$)/ // last char can't be a space, and final _ must preceed punct or \\s (or endline)\n    },\n\n    code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n    br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n    del: noopTest$1,\n    text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n    punctuation: /^([\\s*punctuation])/\n  }; // list of punctuation marks from common mark spec\n  // without * and _ to workaround cases with double emphasis\n\n  inline._punctuation = '!\"#$%&\\'()+\\\\-.,/:;<=>?@\\\\[\\\\]`^{|}~';\n  inline.punctuation = edit$1(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex(); // sequences em should skip over [title](link), `code`, <html>\n\n  inline._blockSkip = '\\\\[[^\\\\]]*?\\\\]\\\\([^\\\\)]*?\\\\)|`[^`]*?`|<[^>]*?>';\n  inline._overlapSkip = '__[^_]*?__|\\\\*\\\\*\\\\[^\\\\*\\\\]*?\\\\*\\\\*';\n  inline._comment = edit$1(block._comment).replace('(?:-->|$)', '-->').getRegex();\n  inline.em.start = edit$1(inline.em.start).replace(/punctuation/g, inline._punctuation).getRegex();\n  inline.em.middle = edit$1(inline.em.middle).replace(/punctuation/g, inline._punctuation).replace(/overlapSkip/g, inline._overlapSkip).getRegex();\n  inline.em.endAst = edit$1(inline.em.endAst, 'g').replace(/punctuation/g, inline._punctuation).getRegex();\n  inline.em.endUnd = edit$1(inline.em.endUnd, 'g').replace(/punctuation/g, inline._punctuation).getRegex();\n  inline.strong.start = edit$1(inline.strong.start).replace(/punctuation/g, inline._punctuation).getRegex();\n  inline.strong.middle = edit$1(inline.strong.middle).replace(/punctuation/g, inline._punctuation).replace(/overlapSkip/g, inline._overlapSkip).getRegex();\n  inline.strong.endAst = edit$1(inline.strong.endAst, 'g').replace(/punctuation/g, inline._punctuation).getRegex();\n  inline.strong.endUnd = edit$1(inline.strong.endUnd, 'g').replace(/punctuation/g, inline._punctuation).getRegex();\n  inline.blockSkip = edit$1(inline._blockSkip, 'g').getRegex();\n  inline.overlapSkip = edit$1(inline._overlapSkip, 'g').getRegex();\n  inline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\n  inline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\n  inline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\n  inline.autolink = edit$1(inline.autolink).replace('scheme', inline._scheme).replace('email', inline._email).getRegex();\n  inline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n  inline.tag = edit$1(inline.tag).replace('comment', inline._comment).replace('attribute', inline._attribute).getRegex();\n  inline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\n  inline._href = /<(?:\\\\[<>]?|[^\\s<>\\\\])*>|[^\\s\\x00-\\x1f]*/;\n  inline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n  inline.link = edit$1(inline.link).replace('label', inline._label).replace('href', inline._href).replace('title', inline._title).getRegex();\n  inline.reflink = edit$1(inline.reflink).replace('label', inline._label).getRegex();\n  inline.reflinkSearch = edit$1(inline.reflinkSearch, 'g').replace('reflink', inline.reflink).replace('nolink', inline.nolink).getRegex();\n  /**\n   * Normal Inline Grammar\n   */\n\n  inline.normal = merge$1({}, inline);\n  /**\n   * Pedantic Inline Grammar\n   */\n\n  inline.pedantic = merge$1({}, inline.normal, {\n    strong: {\n      start: /^__|\\*\\*/,\n      middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n      endAst: /\\*\\*(?!\\*)/g,\n      endUnd: /__(?!_)/g\n    },\n    em: {\n      start: /^_|\\*/,\n      middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n      endAst: /\\*(?!\\*)/g,\n      endUnd: /_(?!_)/g\n    },\n    link: edit$1(/^!?\\[(label)\\]\\((.*?)\\)/).replace('label', inline._label).getRegex(),\n    reflink: edit$1(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace('label', inline._label).getRegex()\n  });\n  /**\n   * GFM Inline Grammar\n   */\n\n  inline.gfm = merge$1({}, inline.normal, {\n    escape: edit$1(inline.escape).replace('])', '~|])').getRegex(),\n    _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n    url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n    _backpedal: /(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,\n    del: /^~+(?=\\S)([\\s\\S]*?\\S)~+/,\n    text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@))|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@))/\n  });\n  inline.gfm.url = edit$1(inline.gfm.url, 'i').replace('email', inline.gfm._extended_email).getRegex();\n  /**\n   * GFM + Line Breaks Inline Grammar\n   */\n\n  inline.breaks = merge$1({}, inline.gfm, {\n    br: edit$1(inline.br).replace('{2,}', '*').getRegex(),\n    text: edit$1(inline.gfm.text).replace('\\\\b_', '\\\\b_| {2,}\\\\n').replace(/\\{2,\\}/g, '*').getRegex()\n  });\n  var rules = {\n    block: block,\n    inline: inline\n  };\n  var defaults$2 = defaults.defaults;\n  var block$1 = rules.block,\n    inline$1 = rules.inline;\n  var repeatString$1 = helpers.repeatString;\n  /**\n   * smartypants text replacement\n   */\n\n  function smartypants(text) {\n    return text // em-dashes\n    .replace(/---/g, \"\\u2014\") // en-dashes\n    .replace(/--/g, \"\\u2013\") // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, \"$1\\u2018\") // closing singles & apostrophes\n    .replace(/'/g, \"\\u2019\") // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, \"$1\\u201C\") // closing doubles\n    .replace(/\"/g, \"\\u201D\") // ellipses\n    .replace(/\\.{3}/g, \"\\u2026\");\n  }\n  /**\n   * mangle email addresses\n   */\n\n  function mangle(text) {\n    var out = '',\n      i,\n      ch;\n    var l = text.length;\n    for (i = 0; i < l; i++) {\n      ch = text.charCodeAt(i);\n      if (Math.random() > 0.5) {\n        ch = 'x' + ch.toString(16);\n      }\n      out += '&#' + ch + ';';\n    }\n    return out;\n  }\n  /**\n   * Block Lexer\n   */\n\n  var Lexer_1 = /*#__PURE__*/function () {\n    function Lexer(options) {\n      this.tokens = [];\n      this.tokens.links = Object.create(null);\n      this.options = options || defaults$2;\n      this.options.tokenizer = this.options.tokenizer || new Tokenizer_1();\n      this.tokenizer = this.options.tokenizer;\n      this.tokenizer.options = this.options;\n      var rules = {\n        block: block$1.normal,\n        inline: inline$1.normal\n      };\n      if (this.options.pedantic) {\n        rules.block = block$1.pedantic;\n        rules.inline = inline$1.pedantic;\n      } else if (this.options.gfm) {\n        rules.block = block$1.gfm;\n        if (this.options.breaks) {\n          rules.inline = inline$1.breaks;\n        } else {\n          rules.inline = inline$1.gfm;\n        }\n      }\n      this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n\n    /**\n     * Static Lex Method\n     */\n    Lexer.lex = function lex(src, options) {\n      var lexer = new Lexer(options);\n      return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */;\n\n    Lexer.lexInline = function lexInline(src, options) {\n      var lexer = new Lexer(options);\n      return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */;\n\n    var _proto = Lexer.prototype;\n    _proto.lex = function lex(src) {\n      src = src.replace(/\\r\\n|\\r/g, '\\n').replace(/\\t/g, '    ');\n      this.blockTokens(src, this.tokens, true);\n      this.inline(this.tokens);\n      return this.tokens;\n    }\n    /**\n     * Lexing\n     */;\n\n    _proto.blockTokens = function blockTokens(src, tokens, top) {\n      if (tokens === void 0) {\n        tokens = [];\n      }\n      if (top === void 0) {\n        top = true;\n      }\n      src = src.replace(/^ +$/gm, '');\n      var token, i, l, lastToken;\n      while (src) {\n        // newline\n        if (token = this.tokenizer.space(src)) {\n          src = src.substring(token.raw.length);\n          if (token.type) {\n            tokens.push(token);\n          }\n          continue;\n        } // code\n\n        if (token = this.tokenizer.code(src, tokens)) {\n          src = src.substring(token.raw.length);\n          if (token.type) {\n            tokens.push(token);\n          } else {\n            lastToken = tokens[tokens.length - 1];\n            lastToken.raw += '\\n' + token.raw;\n            lastToken.text += '\\n' + token.text;\n          }\n          continue;\n        } // fences\n\n        if (token = this.tokenizer.fences(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // heading\n\n        if (token = this.tokenizer.heading(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // table no leading pipe (gfm)\n\n        if (token = this.tokenizer.nptable(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // hr\n\n        if (token = this.tokenizer.hr(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // blockquote\n\n        if (token = this.tokenizer.blockquote(src)) {\n          src = src.substring(token.raw.length);\n          token.tokens = this.blockTokens(token.text, [], top);\n          tokens.push(token);\n          continue;\n        } // list\n\n        if (token = this.tokenizer.list(src)) {\n          src = src.substring(token.raw.length);\n          l = token.items.length;\n          for (i = 0; i < l; i++) {\n            token.items[i].tokens = this.blockTokens(token.items[i].text, [], false);\n          }\n          tokens.push(token);\n          continue;\n        } // html\n\n        if (token = this.tokenizer.html(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // def\n\n        if (top && (token = this.tokenizer.def(src))) {\n          src = src.substring(token.raw.length);\n          if (!this.tokens.links[token.tag]) {\n            this.tokens.links[token.tag] = {\n              href: token.href,\n              title: token.title\n            };\n          }\n          continue;\n        } // table (gfm)\n\n        if (token = this.tokenizer.table(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // lheading\n\n        if (token = this.tokenizer.lheading(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // top-level paragraph\n\n        if (top && (token = this.tokenizer.paragraph(src))) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // text\n\n        if (token = this.tokenizer.text(src, tokens)) {\n          src = src.substring(token.raw.length);\n          if (token.type) {\n            tokens.push(token);\n          } else {\n            lastToken = tokens[tokens.length - 1];\n            lastToken.raw += '\\n' + token.raw;\n            lastToken.text += '\\n' + token.text;\n          }\n          continue;\n        }\n        if (src) {\n          var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n          if (this.options.silent) {\n            console.error(errMsg);\n            break;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n      return tokens;\n    };\n    _proto.inline = function inline(tokens) {\n      var i, j, k, l2, row, token;\n      var l = tokens.length;\n      for (i = 0; i < l; i++) {\n        token = tokens[i];\n        switch (token.type) {\n          case 'paragraph':\n          case 'text':\n          case 'heading':\n            {\n              token.tokens = [];\n              this.inlineTokens(token.text, token.tokens);\n              break;\n            }\n          case 'table':\n            {\n              token.tokens = {\n                header: [],\n                cells: []\n              }; // header\n\n              l2 = token.header.length;\n              for (j = 0; j < l2; j++) {\n                token.tokens.header[j] = [];\n                this.inlineTokens(token.header[j], token.tokens.header[j]);\n              } // cells\n\n              l2 = token.cells.length;\n              for (j = 0; j < l2; j++) {\n                row = token.cells[j];\n                token.tokens.cells[j] = [];\n                for (k = 0; k < row.length; k++) {\n                  token.tokens.cells[j][k] = [];\n                  this.inlineTokens(row[k], token.tokens.cells[j][k]);\n                }\n              }\n              break;\n            }\n          case 'blockquote':\n            {\n              this.inline(token.tokens);\n              break;\n            }\n          case 'list':\n            {\n              l2 = token.items.length;\n              for (j = 0; j < l2; j++) {\n                this.inline(token.items[j].tokens);\n              }\n              break;\n            }\n        }\n      }\n      return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */;\n\n    _proto.inlineTokens = function inlineTokens(src, tokens, inLink, inRawBlock, prevChar) {\n      if (tokens === void 0) {\n        tokens = [];\n      }\n      if (inLink === void 0) {\n        inLink = false;\n      }\n      if (inRawBlock === void 0) {\n        inRawBlock = false;\n      }\n      if (prevChar === void 0) {\n        prevChar = '';\n      }\n      var token; // String with links masked to avoid interference with em and strong\n\n      var maskedSrc = src;\n      var match; // Mask out reflinks\n\n      if (this.tokens.links) {\n        var links = Object.keys(this.tokens.links);\n        if (links.length > 0) {\n          while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n            if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n              maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString$1('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n            }\n          }\n        }\n      } // Mask out other blocks\n\n      while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n        maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString$1('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n      }\n      while (src) {\n        // escape\n        if (token = this.tokenizer.escape(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // tag\n\n        if (token = this.tokenizer.tag(src, inLink, inRawBlock)) {\n          src = src.substring(token.raw.length);\n          inLink = token.inLink;\n          inRawBlock = token.inRawBlock;\n          tokens.push(token);\n          continue;\n        } // link\n\n        if (token = this.tokenizer.link(src)) {\n          src = src.substring(token.raw.length);\n          if (token.type === 'link') {\n            token.tokens = this.inlineTokens(token.text, [], true, inRawBlock);\n          }\n          tokens.push(token);\n          continue;\n        } // reflink, nolink\n\n        if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n          src = src.substring(token.raw.length);\n          if (token.type === 'link') {\n            token.tokens = this.inlineTokens(token.text, [], true, inRawBlock);\n          }\n          tokens.push(token);\n          continue;\n        } // strong\n\n        if (token = this.tokenizer.strong(src, maskedSrc, prevChar)) {\n          src = src.substring(token.raw.length);\n          token.tokens = this.inlineTokens(token.text, [], inLink, inRawBlock);\n          tokens.push(token);\n          continue;\n        } // em\n\n        if (token = this.tokenizer.em(src, maskedSrc, prevChar)) {\n          src = src.substring(token.raw.length);\n          token.tokens = this.inlineTokens(token.text, [], inLink, inRawBlock);\n          tokens.push(token);\n          continue;\n        } // code\n\n        if (token = this.tokenizer.codespan(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // br\n\n        if (token = this.tokenizer.br(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // del (gfm)\n\n        if (token = this.tokenizer.del(src)) {\n          src = src.substring(token.raw.length);\n          token.tokens = this.inlineTokens(token.text, [], inLink, inRawBlock);\n          tokens.push(token);\n          continue;\n        } // autolink\n\n        if (token = this.tokenizer.autolink(src, mangle)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // url (gfm)\n\n        if (!inLink && (token = this.tokenizer.url(src, mangle))) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // text\n\n        if (token = this.tokenizer.inlineText(src, inRawBlock, smartypants)) {\n          src = src.substring(token.raw.length);\n          prevChar = token.raw.slice(-1);\n          tokens.push(token);\n          continue;\n        }\n        if (src) {\n          var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n          if (this.options.silent) {\n            console.error(errMsg);\n            break;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n      return tokens;\n    };\n    _createClass(Lexer, null, [{\n      key: \"rules\",\n      get: function get() {\n        return {\n          block: block$1,\n          inline: inline$1\n        };\n      }\n    }]);\n    return Lexer;\n  }();\n  var defaults$3 = defaults.defaults;\n  var cleanUrl$1 = helpers.cleanUrl,\n    escape$1 = helpers.escape;\n  /**\n   * Renderer\n   */\n\n  var Renderer_1 = /*#__PURE__*/function () {\n    function Renderer(options) {\n      this.options = options || defaults$3;\n    }\n    var _proto = Renderer.prototype;\n    _proto.code = function code(_code, infostring, escaped) {\n      var lang = (infostring || '').match(/\\S*/)[0];\n      if (this.options.highlight) {\n        var out = this.options.highlight(_code, lang);\n        if (out != null && out !== _code) {\n          escaped = true;\n          _code = out;\n        }\n      }\n      if (!lang) {\n        return '<pre><code>' + (escaped ? _code : escape$1(_code, true)) + '</code></pre>\\n';\n      }\n      return '<pre><code class=\"' + this.options.langPrefix + escape$1(lang, true) + '\">' + (escaped ? _code : escape$1(_code, true)) + '</code></pre>\\n';\n    };\n    _proto.blockquote = function blockquote(quote) {\n      return '<blockquote>\\n' + quote + '</blockquote>\\n';\n    };\n    _proto.html = function html(_html) {\n      return _html;\n    };\n    _proto.heading = function heading(text, level, raw, slugger) {\n      if (this.options.headerIds) {\n        return '<h' + level + ' id=\"' + this.options.headerPrefix + slugger.slug(raw) + '\">' + text + '</h' + level + '>\\n';\n      } // ignore IDs\n\n      return '<h' + level + '>' + text + '</h' + level + '>\\n';\n    };\n    _proto.hr = function hr() {\n      return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n    };\n    _proto.list = function list(body, ordered, start) {\n      var type = ordered ? 'ol' : 'ul',\n        startatt = ordered && start !== 1 ? ' start=\"' + start + '\"' : '';\n      return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n    };\n    _proto.listitem = function listitem(text) {\n      return '<li>' + text + '</li>\\n';\n    };\n    _proto.checkbox = function checkbox(checked) {\n      return '<input ' + (checked ? 'checked=\"\" ' : '') + 'disabled=\"\" type=\"checkbox\"' + (this.options.xhtml ? ' /' : '') + '> ';\n    };\n    _proto.paragraph = function paragraph(text) {\n      return '<p>' + text + '</p>\\n';\n    };\n    _proto.table = function table(header, body) {\n      if (body) body = '<tbody>' + body + '</tbody>';\n      return '<table>\\n' + '<thead>\\n' + header + '</thead>\\n' + body + '</table>\\n';\n    };\n    _proto.tablerow = function tablerow(content) {\n      return '<tr>\\n' + content + '</tr>\\n';\n    };\n    _proto.tablecell = function tablecell(content, flags) {\n      var type = flags.header ? 'th' : 'td';\n      var tag = flags.align ? '<' + type + ' align=\"' + flags.align + '\">' : '<' + type + '>';\n      return tag + content + '</' + type + '>\\n';\n    } // span level renderer\n    ;\n\n    _proto.strong = function strong(text) {\n      return '<strong>' + text + '</strong>';\n    };\n    _proto.em = function em(text) {\n      return '<em>' + text + '</em>';\n    };\n    _proto.codespan = function codespan(text) {\n      return '<code>' + text + '</code>';\n    };\n    _proto.br = function br() {\n      return this.options.xhtml ? '<br/>' : '<br>';\n    };\n    _proto.del = function del(text) {\n      return '<del>' + text + '</del>';\n    };\n    _proto.link = function link(href, title, text) {\n      href = cleanUrl$1(this.options.sanitize, this.options.baseUrl, href);\n      if (href === null) {\n        return text;\n      }\n      var out = '<a href=\"' + escape$1(href) + '\"';\n      if (title) {\n        out += ' title=\"' + title + '\"';\n      }\n      out += '>' + text + '</a>';\n      return out;\n    };\n    _proto.image = function image(href, title, text) {\n      href = cleanUrl$1(this.options.sanitize, this.options.baseUrl, href);\n      if (href === null) {\n        return text;\n      }\n      var out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n      if (title) {\n        out += ' title=\"' + title + '\"';\n      }\n      out += this.options.xhtml ? '/>' : '>';\n      return out;\n    };\n    _proto.text = function text(_text) {\n      return _text;\n    };\n    return Renderer;\n  }();\n\n  /**\n   * TextRenderer\n   * returns only the textual part of the token\n   */\n  var TextRenderer_1 = /*#__PURE__*/function () {\n    function TextRenderer() {}\n    var _proto = TextRenderer.prototype;\n\n    // no need for block level renderers\n    _proto.strong = function strong(text) {\n      return text;\n    };\n    _proto.em = function em(text) {\n      return text;\n    };\n    _proto.codespan = function codespan(text) {\n      return text;\n    };\n    _proto.del = function del(text) {\n      return text;\n    };\n    _proto.html = function html(text) {\n      return text;\n    };\n    _proto.text = function text(_text) {\n      return _text;\n    };\n    _proto.link = function link(href, title, text) {\n      return '' + text;\n    };\n    _proto.image = function image(href, title, text) {\n      return '' + text;\n    };\n    _proto.br = function br() {\n      return '';\n    };\n    return TextRenderer;\n  }();\n\n  /**\n   * Slugger generates header id\n   */\n  var Slugger_1 = /*#__PURE__*/function () {\n    function Slugger() {\n      this.seen = {};\n    }\n    var _proto = Slugger.prototype;\n    _proto.serialize = function serialize(value) {\n      return value.toLowerCase().trim() // remove html tags\n      .replace(/<[!\\/a-z].*?>/ig, '') // remove unwanted chars\n      .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '').replace(/\\s/g, '-');\n    }\n    /**\n     * Finds the next safe (unique) slug to use\n     */;\n\n    _proto.getNextSafeSlug = function getNextSafeSlug(originalSlug, isDryRun) {\n      var slug = originalSlug;\n      var occurenceAccumulator = 0;\n      if (this.seen.hasOwnProperty(slug)) {\n        occurenceAccumulator = this.seen[originalSlug];\n        do {\n          occurenceAccumulator++;\n          slug = originalSlug + '-' + occurenceAccumulator;\n        } while (this.seen.hasOwnProperty(slug));\n      }\n      if (!isDryRun) {\n        this.seen[originalSlug] = occurenceAccumulator;\n        this.seen[slug] = 0;\n      }\n      return slug;\n    }\n    /**\n     * Convert string to unique id\n     * @param {object} options\n     * @param {boolean} options.dryrun Generates the next unique slug without updating the internal accumulator.\n     */;\n\n    _proto.slug = function slug(value, options) {\n      if (options === void 0) {\n        options = {};\n      }\n      var slug = this.serialize(value);\n      return this.getNextSafeSlug(slug, options.dryrun);\n    };\n    return Slugger;\n  }();\n  var defaults$4 = defaults.defaults;\n  var unescape$1 = helpers.unescape;\n  /**\n   * Parsing & Compiling\n   */\n\n  var Parser_1 = /*#__PURE__*/function () {\n    function Parser(options) {\n      this.options = options || defaults$4;\n      this.options.renderer = this.options.renderer || new Renderer_1();\n      this.renderer = this.options.renderer;\n      this.renderer.options = this.options;\n      this.textRenderer = new TextRenderer_1();\n      this.slugger = new Slugger_1();\n    }\n    /**\n     * Static Parse Method\n     */\n\n    Parser.parse = function parse(tokens, options) {\n      var parser = new Parser(options);\n      return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */;\n\n    Parser.parseInline = function parseInline(tokens, options) {\n      var parser = new Parser(options);\n      return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */;\n\n    var _proto = Parser.prototype;\n    _proto.parse = function parse(tokens, top) {\n      if (top === void 0) {\n        top = true;\n      }\n      var out = '',\n        i,\n        j,\n        k,\n        l2,\n        l3,\n        row,\n        cell,\n        header,\n        body,\n        token,\n        ordered,\n        start,\n        loose,\n        itemBody,\n        item,\n        checked,\n        task,\n        checkbox;\n      var l = tokens.length;\n      for (i = 0; i < l; i++) {\n        token = tokens[i];\n        switch (token.type) {\n          case 'space':\n            {\n              continue;\n            }\n          case 'hr':\n            {\n              out += this.renderer.hr();\n              continue;\n            }\n          case 'heading':\n            {\n              out += this.renderer.heading(this.parseInline(token.tokens), token.depth, unescape$1(this.parseInline(token.tokens, this.textRenderer)), this.slugger);\n              continue;\n            }\n          case 'code':\n            {\n              out += this.renderer.code(token.text, token.lang, token.escaped);\n              continue;\n            }\n          case 'table':\n            {\n              header = ''; // header\n\n              cell = '';\n              l2 = token.header.length;\n              for (j = 0; j < l2; j++) {\n                cell += this.renderer.tablecell(this.parseInline(token.tokens.header[j]), {\n                  header: true,\n                  align: token.align[j]\n                });\n              }\n              header += this.renderer.tablerow(cell);\n              body = '';\n              l2 = token.cells.length;\n              for (j = 0; j < l2; j++) {\n                row = token.tokens.cells[j];\n                cell = '';\n                l3 = row.length;\n                for (k = 0; k < l3; k++) {\n                  cell += this.renderer.tablecell(this.parseInline(row[k]), {\n                    header: false,\n                    align: token.align[k]\n                  });\n                }\n                body += this.renderer.tablerow(cell);\n              }\n              out += this.renderer.table(header, body);\n              continue;\n            }\n          case 'blockquote':\n            {\n              body = this.parse(token.tokens);\n              out += this.renderer.blockquote(body);\n              continue;\n            }\n          case 'list':\n            {\n              ordered = token.ordered;\n              start = token.start;\n              loose = token.loose;\n              l2 = token.items.length;\n              body = '';\n              for (j = 0; j < l2; j++) {\n                item = token.items[j];\n                checked = item.checked;\n                task = item.task;\n                itemBody = '';\n                if (item.task) {\n                  checkbox = this.renderer.checkbox(checked);\n                  if (loose) {\n                    if (item.tokens.length > 0 && item.tokens[0].type === 'text') {\n                      item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                      if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                      }\n                    } else {\n                      item.tokens.unshift({\n                        type: 'text',\n                        text: checkbox\n                      });\n                    }\n                  } else {\n                    itemBody += checkbox;\n                  }\n                }\n                itemBody += this.parse(item.tokens, loose);\n                body += this.renderer.listitem(itemBody, task, checked);\n              }\n              out += this.renderer.list(body, ordered, start);\n              continue;\n            }\n          case 'html':\n            {\n              // TODO parse inline content if parameter markdown=1\n              out += this.renderer.html(token.text);\n              continue;\n            }\n          case 'paragraph':\n            {\n              out += this.renderer.paragraph(this.parseInline(token.tokens));\n              continue;\n            }\n          case 'text':\n            {\n              body = token.tokens ? this.parseInline(token.tokens) : token.text;\n              while (i + 1 < l && tokens[i + 1].type === 'text') {\n                token = tokens[++i];\n                body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n              }\n              out += top ? this.renderer.paragraph(body) : body;\n              continue;\n            }\n          default:\n            {\n              var errMsg = 'Token with \"' + token.type + '\" type was not found.';\n              if (this.options.silent) {\n                console.error(errMsg);\n                return;\n              } else {\n                throw new Error(errMsg);\n              }\n            }\n        }\n      }\n      return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */;\n\n    _proto.parseInline = function parseInline(tokens, renderer) {\n      renderer = renderer || this.renderer;\n      var out = '',\n        i,\n        token;\n      var l = tokens.length;\n      for (i = 0; i < l; i++) {\n        token = tokens[i];\n        switch (token.type) {\n          case 'escape':\n            {\n              out += renderer.text(token.text);\n              break;\n            }\n          case 'html':\n            {\n              out += renderer.html(token.text);\n              break;\n            }\n          case 'link':\n            {\n              out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n              break;\n            }\n          case 'image':\n            {\n              out += renderer.image(token.href, token.title, token.text);\n              break;\n            }\n          case 'strong':\n            {\n              out += renderer.strong(this.parseInline(token.tokens, renderer));\n              break;\n            }\n          case 'em':\n            {\n              out += renderer.em(this.parseInline(token.tokens, renderer));\n              break;\n            }\n          case 'codespan':\n            {\n              out += renderer.codespan(token.text);\n              break;\n            }\n          case 'br':\n            {\n              out += renderer.br();\n              break;\n            }\n          case 'del':\n            {\n              out += renderer.del(this.parseInline(token.tokens, renderer));\n              break;\n            }\n          case 'text':\n            {\n              out += renderer.text(token.text);\n              break;\n            }\n          default:\n            {\n              var errMsg = 'Token with \"' + token.type + '\" type was not found.';\n              if (this.options.silent) {\n                console.error(errMsg);\n                return;\n              } else {\n                throw new Error(errMsg);\n              }\n            }\n        }\n      }\n      return out;\n    };\n    return Parser;\n  }();\n  var merge$2 = helpers.merge,\n    checkSanitizeDeprecation$1 = helpers.checkSanitizeDeprecation,\n    escape$2 = helpers.escape;\n  var getDefaults = defaults.getDefaults,\n    changeDefaults = defaults.changeDefaults,\n    defaults$5 = defaults.defaults;\n  /**\n   * Marked\n   */\n\n  function marked(src, opt, callback) {\n    // throw error in case of non string input\n    if (typeof src === 'undefined' || src === null) {\n      throw new Error('marked(): input parameter is undefined or null');\n    }\n    if (typeof src !== 'string') {\n      throw new Error('marked(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');\n    }\n    if (typeof opt === 'function') {\n      callback = opt;\n      opt = null;\n    }\n    opt = merge$2({}, marked.defaults, opt || {});\n    checkSanitizeDeprecation$1(opt);\n    if (callback) {\n      var highlight = opt.highlight;\n      var tokens;\n      try {\n        tokens = Lexer_1.lex(src, opt);\n      } catch (e) {\n        return callback(e);\n      }\n      var done = function done(err) {\n        var out;\n        if (!err) {\n          try {\n            out = Parser_1.parse(tokens, opt);\n          } catch (e) {\n            err = e;\n          }\n        }\n        opt.highlight = highlight;\n        return err ? callback(err) : callback(null, out);\n      };\n      if (!highlight || highlight.length < 3) {\n        return done();\n      }\n      delete opt.highlight;\n      if (!tokens.length) return done();\n      var pending = 0;\n      marked.walkTokens(tokens, function (token) {\n        if (token.type === 'code') {\n          pending++;\n          setTimeout(function () {\n            highlight(token.text, token.lang, function (err, code) {\n              if (err) {\n                return done(err);\n              }\n              if (code != null && code !== token.text) {\n                token.text = code;\n                token.escaped = true;\n              }\n              pending--;\n              if (pending === 0) {\n                done();\n              }\n            });\n          }, 0);\n        }\n      });\n      if (pending === 0) {\n        done();\n      }\n      return;\n    }\n    try {\n      var _tokens = Lexer_1.lex(src, opt);\n      if (opt.walkTokens) {\n        marked.walkTokens(_tokens, opt.walkTokens);\n      }\n      return Parser_1.parse(_tokens, opt);\n    } catch (e) {\n      e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n      if (opt.silent) {\n        return '<p>An error occurred:</p><pre>' + escape$2(e.message + '', true) + '</pre>';\n      }\n      throw e;\n    }\n  }\n  /**\n   * Options\n   */\n\n  marked.options = marked.setOptions = function (opt) {\n    merge$2(marked.defaults, opt);\n    changeDefaults(marked.defaults);\n    return marked;\n  };\n  marked.getDefaults = getDefaults;\n  marked.defaults = defaults$5;\n  /**\n   * Use Extension\n   */\n\n  marked.use = function (extension) {\n    var opts = merge$2({}, extension);\n    if (extension.renderer) {\n      (function () {\n        var renderer = marked.defaults.renderer || new Renderer_1();\n        var _loop = function _loop(prop) {\n          var prevRenderer = renderer[prop];\n          renderer[prop] = function () {\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n            var ret = extension.renderer[prop].apply(renderer, args);\n            if (ret === false) {\n              ret = prevRenderer.apply(renderer, args);\n            }\n            return ret;\n          };\n        };\n        for (var prop in extension.renderer) {\n          _loop(prop);\n        }\n        opts.renderer = renderer;\n      })();\n    }\n    if (extension.tokenizer) {\n      (function () {\n        var tokenizer = marked.defaults.tokenizer || new Tokenizer_1();\n        var _loop2 = function _loop2(prop) {\n          var prevTokenizer = tokenizer[prop];\n          tokenizer[prop] = function () {\n            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n              args[_key2] = arguments[_key2];\n            }\n            var ret = extension.tokenizer[prop].apply(tokenizer, args);\n            if (ret === false) {\n              ret = prevTokenizer.apply(tokenizer, args);\n            }\n            return ret;\n          };\n        };\n        for (var prop in extension.tokenizer) {\n          _loop2(prop);\n        }\n        opts.tokenizer = tokenizer;\n      })();\n    }\n    if (extension.walkTokens) {\n      var walkTokens = marked.defaults.walkTokens;\n      opts.walkTokens = function (token) {\n        extension.walkTokens(token);\n        if (walkTokens) {\n          walkTokens(token);\n        }\n      };\n    }\n    marked.setOptions(opts);\n  };\n  /**\n   * Run callback for every token\n   */\n\n  marked.walkTokens = function (tokens, callback) {\n    for (var _iterator = _createForOfIteratorHelperLoose(tokens), _step; !(_step = _iterator()).done;) {\n      var token = _step.value;\n      callback(token);\n      switch (token.type) {\n        case 'table':\n          {\n            for (var _iterator2 = _createForOfIteratorHelperLoose(token.tokens.header), _step2; !(_step2 = _iterator2()).done;) {\n              var cell = _step2.value;\n              marked.walkTokens(cell, callback);\n            }\n            for (var _iterator3 = _createForOfIteratorHelperLoose(token.tokens.cells), _step3; !(_step3 = _iterator3()).done;) {\n              var row = _step3.value;\n              for (var _iterator4 = _createForOfIteratorHelperLoose(row), _step4; !(_step4 = _iterator4()).done;) {\n                var _cell = _step4.value;\n                marked.walkTokens(_cell, callback);\n              }\n            }\n            break;\n          }\n        case 'list':\n          {\n            marked.walkTokens(token.items, callback);\n            break;\n          }\n        default:\n          {\n            if (token.tokens) {\n              marked.walkTokens(token.tokens, callback);\n            }\n          }\n      }\n    }\n  };\n  /**\n   * Parse Inline\n   */\n\n  marked.parseInline = function (src, opt) {\n    // throw error in case of non string input\n    if (typeof src === 'undefined' || src === null) {\n      throw new Error('marked.parseInline(): input parameter is undefined or null');\n    }\n    if (typeof src !== 'string') {\n      throw new Error('marked.parseInline(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');\n    }\n    opt = merge$2({}, marked.defaults, opt || {});\n    checkSanitizeDeprecation$1(opt);\n    try {\n      var tokens = Lexer_1.lexInline(src, opt);\n      if (opt.walkTokens) {\n        marked.walkTokens(tokens, opt.walkTokens);\n      }\n      return Parser_1.parseInline(tokens, opt);\n    } catch (e) {\n      e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n      if (opt.silent) {\n        return '<p>An error occurred:</p><pre>' + escape$2(e.message + '', true) + '</pre>';\n      }\n      throw e;\n    }\n  };\n  /**\n   * Expose\n   */\n\n  marked.Parser = Parser_1;\n  marked.parser = Parser_1.parse;\n  marked.Renderer = Renderer_1;\n  marked.TextRenderer = TextRenderer_1;\n  marked.Lexer = Lexer_1;\n  marked.lexer = Lexer_1.lex;\n  marked.Tokenizer = Tokenizer_1;\n  marked.Slugger = Slugger_1;\n  marked.parse = marked;\n  var marked_1 = marked;\n  return marked_1;\n});\n\n//# sourceURL=webpack://@k2works/full-stack-lab/./node_modules/marked/lib/marked.js?");

/***/ }),

/***/ "./src/app.js":
/*!********************!*\
  !*** ./src/app.js ***!
  \********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index */ \"./index.js\");\n/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib */ \"./src/lib.js\");\n\n\nvar contents = \"\\n## \\u6A5F\\u80FD\\u540D\\n## \\u4ED5\\u69D8\\n## TODO\\u30EA\\u30B9\\u30C8\\n\";\nvar usecase = \"\\n@startuml\\nleft to right direction\\nactor \\\"Actor\\\" as ac\\nrectangle Application {\\n  usecase \\\"UseCase1\\\" as UC1\\n  usecase \\\"UseCase2\\\" as UC2\\n  usecase \\\"UseCase3\\\" as UC3\\n}\\nac --> UC1\\nac --> UC2\\nac --> UC3\\n@enduml\\n\";\nvar ui = \"\\n@startsalt\\n{+\\n  \\u30B3\\u30EC\\u30AF\\u30B7\\u30E7\\u30F3\\u753B\\u9762\\n  {+\\n  {\\n  \\u751F\\u5F92\\n  \\u6559\\u54E1\\n  \\u7D44\\n  \\u90E8\\n  \\u30A4\\u30D9\\u30F3\\u30C8\\n  } |\\n  {\\n    == \\u751F\\u5F92\\n    { + <&zoom-in> (          )}\\n    {T#\\n    + \\u7530\\u5C3B\\u3000\\u667A\\u88D5  | 3\\u5E74B\\u7D44    | \\u91CE\\u7403\\u90E8 \\u5199\\u771F\\u90E8\\n    + \\u5C71\\u7530\\u3000\\u592A\\u90CE  | 3\\u5E74A\\u7D44    | \\u91CE\\u7403\\u90E8\\n    + \\u9234\\u6728\\u3000\\u82B1\\u5B50  | 3\\u5E74A\\u7D44    | \\u5199\\u771F\\u90E8\\n    }\\n  }\\n  }\\n----------------\\n  \\u30B7\\u30F3\\u30B0\\u30EB\\u753B\\u9762\\n  {+\\n  {\\n  \\u751F\\u5F92\\n  \\u6559\\u54E1\\n  \\u7D44\\n  \\u90E8\\n  \\u30A4\\u30D9\\u30F3\\u30C8\\n  } |\\n  {\\n    {\\n      <&person> <b>\\u7530\\u5C3B \\u667A\\u88D5\\n    }\\n    {\\n      \\u540D\\u524D\\n      \\u7530\\u5C3B\\u3000\\u667A\\u88D5\\n      \\u7D44\\n      3\\u5E74B\\u7D44\\n      \\u90E8\\n      \\u91CE\\u7403\\u90E8 \\u5199\\u771F\\u90E8\\n      \\u95A2\\u9023\\u3059\\u308B\\u751F\\u5F92\\n      \\u7530\\u5C3B\\u3000\\u667A\\u88D5 \\u5C71\\u7530\\u3000\\u592A\\u90CE\\u3000\\u9234\\u6728\\u3000\\u82B1\\u5B50\\n    }\\n  }\\n  }\\n}\\n@endsalt\\n\";\nvar uiModel = \"\\n@startuml\\n  class \\u90E8 {\\n    \\u540D\\u79F0\\n    \\u30AB\\u30C6\\u30B4\\u30EA\\u30FC\\n    \\u751F\\u5F92\\u6570\\n    \\u5370\\u5237()\\n    \\u65B0\\u898F()\\n    \\u524A\\u9664()\\n  }\\n  class \\u751F\\u5F92 {\\n    \\u6C0F\\u540D\\n    \\u6210\\u7E3E\\n    \\u5370\\u5237()\\n    \\u65B0\\u898F()\\n    \\u524A\\u9664()\\n  }\\n  class \\u7D44 {\\n    \\u540D\\u79F0\\n    \\u5370\\u5237()\\n    \\u65B0\\u898F()\\n    \\u524A\\u9664()\\n  }\\n  class \\u6559\\u54E1 {\\n    \\u6C0F\\u540D\\n    \\u96FB\\u8A71\\u756A\\u53F7\\n    \\u5370\\u5237()\\n    \\u65B0\\u898F()\\n    \\u524A\\u9664()\\n  }\\n  class \\u30A4\\u30D9\\u30F3\\u30C8 {\\n    \\u540D\\u79F0\\n    \\u65E5\\u4ED8\\n    \\u5370\\u5237()\\n    \\u65B0\\u898F()\\n    \\u524A\\u9664()\\n  }\\n  \\u90E8 *-* \\u751F\\u5F92\\n  \\u90E8 *-- \\u6559\\u54E1\\n  \\u30A4\\u30D9\\u30F3\\u30C8 *- \\u6559\\u54E1\\n  \\u751F\\u5F92 --* \\u7D44\\n\";\nvar uiInteraction = \"\\n@startuml\\n  \\u30A4\\u30D9\\u30F3\\u30C8_\\u30B3\\u30EC\\u30AF\\u30B7\\u30E7\\u30F3 --> \\u30A4\\u30D9\\u30F3\\u30C8_\\u30B7\\u30F3\\u30B0\\u30EB\\n  \\u30A4\\u30D9\\u30F3\\u30C8_\\u30B7\\u30F3\\u30B0\\u30EB --> \\u6559\\u54E1_\\u30B7\\u30F3\\u30B0\\u30EB\\n  \\u6559\\u54E1_\\u30B3\\u30EC\\u30AF\\u30B7\\u30E7\\u30F3 --> \\u6559\\u54E1_\\u30B7\\u30F3\\u30B0\\u30EB\\n  \\u6559\\u54E1_\\u30B7\\u30F3\\u30B0\\u30EB --> \\u90E8_\\u30B3\\u30EC\\u30AF\\u30B7\\u30E7\\u30F3\\n  \\u6559\\u54E1_\\u30B7\\u30F3\\u30B0\\u30EB <-> \\u7D44_\\u30B7\\u30F3\\u30B0\\u30EB\\n  \\u7D44_\\u30B3\\u30EC\\u30AF\\u30B7\\u30E7\\u30F3 --> \\u7D44_\\u30B7\\u30F3\\u30B0\\u30EB\\n  \\u7D44_\\u30B7\\u30F3\\u30B0\\u30EB --> \\u751F\\u5F92_\\u30B3\\u30EC\\u30AF\\u30B7\\u30E7\\u30F3\\n  \\u751F\\u5F92_\\u30B3\\u30EC\\u30AF\\u30B7\\u30E7\\u30F3 --> \\u751F\\u5F92_\\u30B7\\u30F3\\u30B0\\u30EB\\n  \\u751F\\u5F92_\\u30B7\\u30F3\\u30B0\\u30EB -> \\u7D44_\\u30B7\\u30F3\\u30B0\\u30EB\\n  \\u751F\\u5F92_\\u30B7\\u30F3\\u30B0\\u30EB --> \\u90E8_\\u30B3\\u30EC\\u30AF\\u30B7\\u30E7\\u30F3\\n  \\u90E8_\\u30B3\\u30EC\\u30AF\\u30B7\\u30E7\\u30F3 --> \\u90E8_\\u30B7\\u30F3\\u30B0\\u30EB\\n  \\u90E8_\\u30B7\\u30F3\\u30B0\\u30EB --> \\u751F\\u5F92_\\u30B3\\u30EC\\u30AF\\u30B7\\u30E7\\u30F3\\n@enduml\\n\";\nvar uml = \"\\n@startuml\\nabstract class AbstractList\\nabstract AbstractCollection\\ninterface List\\ninterface Collection\\nList <|-- AbstractList\\nCollection <|-- AbstractCollection\\nCollection <|- List\\nAbstractCollection <|- AbstractList\\nAbstractList <|-- ArrayList\\nclass ArrayList {\\n  Object[] elementData\\n  size()\\n}\\nenum TimeUnit {\\n  DAYS\\n  HOURS\\n  MINUTES\\n}\\nannotation SuppressWarnings\\n@enduml\\n\";\nvar erd = \"\\n@startuml\\n' hide the spot\\nhide circle\\n' avoid problems with angled crows feet\\nskinparam linetype ortho\\nentity \\\"Entity01\\\" as e01 {\\n  *e1_id : number <<generated>>\\n  --\\n  *name : text\\n  description : text\\n}\\nentity \\\"Entity02\\\" as e02 {\\n  *e2_id : number <<generated>>\\n  --\\n  *e1_id : number <<FK>>\\n  other_details : text\\n}\\nentity \\\"Entity03\\\" as e03 {\\n  *e3_id : number <<generated>>\\n  --\\n  e1_id : number <<FK>>\\n  other_details : text\\n}\\ne01 ||..o{ e02\\ne01 |o..o{ e03\\n@enduml\\n\";\nvar mode = _lib__WEBPACK_IMPORTED_MODULE_1__.style.APP;\n(0,_index__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n  contents: contents,\n  ui: ui,\n  uiModel: uiModel,\n  uiInteraction: uiInteraction,\n  usecase: usecase,\n  uml: uml,\n  erd: erd,\n  mode: mode\n});\n\n//# sourceURL=webpack://@k2works/full-stack-lab/./src/app.js?");

/***/ }),

/***/ "./src/lib.js":
/*!********************!*\
  !*** ./src/lib.js ***!
  \********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"render\": function() { return /* binding */ render; },\n/* harmony export */   \"style\": function() { return /* binding */ style; }\n/* harmony export */ });\n/* harmony import */ var marked__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! marked */ \"./node_modules/marked/lib/marked.js\");\n/* harmony import */ var marked__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(marked__WEBPACK_IMPORTED_MODULE_0__);\n\nvar style = {\n  APP: 'APP',\n  UI: 'UI',\n  API: 'API',\n  DOC: 'DOC'\n};\nvar render = function render(params) {\n  var contents = params.contents,\n    usecase = params.usecase,\n    ui = params.ui,\n    uiModel = params.uiModel,\n    uiInteraction = params.uiInteraction,\n    uml = params.uml,\n    erd = params.erd,\n    mode = params.mode;\n  init(mode);\n  documents(contents);\n  diagrams(usecase, ui, uiModel, uiInteraction, uml, erd, mode);\n};\nvar init = function init(style) {\n  document.addEventListener('DOMContentLoaded', function () {\n    var dev = document.querySelector('#app-dev');\n    if (dev !== null) {\n      switch (style) {\n        case \"UI\":\n          dev.innerHTML = \"\\n            <div class=\\\"container\\\">\\n              <h1>\\u958B\\u767A</h1>\\n              <div class=\\\"py-3\\\">\\n                <div id=\\\"app\\\"></div>\\n                <!--<div id=\\\"mocha\\\"></div>-->\\n              </div>\\n              <div class=\\\"row p-3\\\">\\n                <div id=\\\"spec\\\"></div>\\n              </div>\\n              <h2>\\u30E6\\u30FC\\u30B9\\u30B1\\u30FC\\u30B9</h2>\\n              <div class=\\\"row p-3\\\">\\n                <img id=\\\"usecae-im\\\"\\n                src=http://www.plantuml.com/plantuml/img/SyfFKj2rKt3CoKnELR1Io4ZDoSa70000>\\n              </div>\\n              <h2>\\u30E6\\u30FC\\u30B6\\u30FC\\u30A4\\u30F3\\u30BF\\u30FC\\u30D5\\u30A7\\u30FC\\u30B9</h2>\\n              <div class=\\\"row p-3\\\">\\n                <img id=\\\"ui-im\\\"\\n                src=http://www.plantuml.com/plantuml/img/SyfFKj2rKt3CoKnELR1Io4ZDoSa70000>\\n              </div>\\n              <h3>\\u30E2\\u30C7\\u30EB</h3>\\n              <div class=\\\"row p-3\\\">\\n                <img id=\\\"ui-model-im\\\"\\n                src=http://www.plantuml.com/plantuml/img/SyfFKj2rKt3CoKnELR1Io4ZDoSa70000>\\n              </div>\\n              <h3>\\u30A4\\u30F3\\u30BF\\u30E9\\u30AF\\u30B7\\u30E7\\u30F3</h3>\\n              <div class=\\\"row p-3\\\">\\n                <img id=\\\"ui-interaction-im\\\"\\n                src=http://www.plantuml.com/plantuml/img/SyfFKj2rKt3CoKnELR1Io4ZDoSa70000>\\n              </div>\\n            </div> \";\n          break;\n        case \"API\":\n          dev.innerHTML = \"\\n            <div class=\\\"container\\\">\\n              <h1>\\u958B\\u767A</h1>\\n              <div class=\\\"py-3\\\">\\n                <div id=\\\"app\\\"></div>\\n                <!--<div id=\\\"mocha\\\"></div>-->\\n              </div>\\n              <div class=\\\"row p-3\\\">\\n                <div id=\\\"spec\\\"></div>\\n              </div>\\n              <h2>\\u30E6\\u30FC\\u30B9\\u30B1\\u30FC\\u30B9</h2>\\n              <div class=\\\"row p-3\\\">\\n                <img id=\\\"usecae-im\\\"\\n                src=http://www.plantuml.com/plantuml/img/SyfFKj2rKt3CoKnELR1Io4ZDoSa70000>\\n              </div>\\n              <h2>\\u30AA\\u30D6\\u30B8\\u30A7\\u30AF\\u30C8\\u30E2\\u30C7\\u30EB</h2>\\n              <div class=\\\"row p-3\\\">\\n                <img id=\\\"class-im\\\"\\n                src=http://www.plantuml.com/plantuml/img/SyfFKj2rKt3CoKnELR1Io4ZDoSa70000>\\n              </div>\\n              <h2>\\u30C7\\u30FC\\u30BF\\u30E2\\u30C7\\u30EB</h2>\\n              <div class=\\\"row p-3\\\">\\n                <img id=\\\"er-im\\\"\\n                src=http://www.plantuml.com/plantuml/img/SyfFKj2rKt3CoKnELR1Io4ZDoSa70000>\\n              </div>\\n            </div> \";\n          break;\n        default:\n          dev.innerHTML = \"\\n            <div class=\\\"container\\\">\\n              <h1>\\u958B\\u767A</h1>\\n              <div class=\\\"py-3\\\">\\n                <div id=\\\"app\\\"></div>\\n                <!--<div id=\\\"mocha\\\"></div>-->\\n              </div>\\n              <div class=\\\"row p-3\\\">\\n                <div id=\\\"spec\\\"></div>\\n              </div>\\n              <h2>\\u30E6\\u30FC\\u30B9\\u30B1\\u30FC\\u30B9</h2>\\n              <div class=\\\"row p-3\\\">\\n                <img id=\\\"usecae-im\\\"\\n                src=http://www.plantuml.com/plantuml/img/SyfFKj2rKt3CoKnELR1Io4ZDoSa70000>\\n              </div>\\n              <h2>\\u30E6\\u30FC\\u30B6\\u30FC\\u30A4\\u30F3\\u30BF\\u30FC\\u30D5\\u30A7\\u30FC\\u30B9</h2>\\n              <div class=\\\"row p-3\\\">\\n                <img id=\\\"ui-im\\\"\\n                src=http://www.plantuml.com/plantuml/img/SyfFKj2rKt3CoKnELR1Io4ZDoSa70000>\\n              </div>\\n              <h3>\\u30E2\\u30C7\\u30EB</h3>\\n              <div class=\\\"row p-3\\\">\\n                <img id=\\\"ui-model-im\\\"\\n                src=http://www.plantuml.com/plantuml/img/SyfFKj2rKt3CoKnELR1Io4ZDoSa70000>\\n              </div>\\n              <h3>\\u30A4\\u30F3\\u30BF\\u30E9\\u30AF\\u30B7\\u30E7\\u30F3</h3>\\n              <div class=\\\"row p-3\\\">\\n                <img id=\\\"ui-interaction-im\\\"\\n                src=http://www.plantuml.com/plantuml/img/SyfFKj2rKt3CoKnELR1Io4ZDoSa70000>\\n              </div>\\n              <h2>\\u30AA\\u30D6\\u30B8\\u30A7\\u30AF\\u30C8\\u30E2\\u30C7\\u30EB</h2>\\n              <div class=\\\"row p-3\\\">\\n                <img id=\\\"class-im\\\"\\n                src=http://www.plantuml.com/plantuml/img/SyfFKj2rKt3CoKnELR1Io4ZDoSa70000>\\n              </div>\\n              <h2>\\u30C7\\u30FC\\u30BF\\u30E2\\u30C7\\u30EB</h2>\\n              <div class=\\\"row p-3\\\">\\n                <img id=\\\"er-im\\\"\\n                src=http://www.plantuml.com/plantuml/img/SyfFKj2rKt3CoKnELR1Io4ZDoSa70000>\\n              </div>\\n            </div> \";\n      }\n    }\n  });\n};\nvar documents = function documents(contents) {\n  document.addEventListener('DOMContentLoaded', function () {\n    var spec = document.getElementById('spec');\n    if (spec) {\n      // eslint-disable-next-line no-undef\n      spec.innerHTML = marked__WEBPACK_IMPORTED_MODULE_0___default()(contents);\n    }\n  });\n};\nvar diagrams = function diagrams(usecase, ui, uiModel, uiInteraction, uml, erd, mode) {\n  if (mode === style.UI) {\n    (function (usecae) {\n      var outputId = 'usecae-im';\n      var source = usecae;\n      compress(source, outputId);\n    })(usecase);\n    (function (ui) {\n      var outputId = 'ui-im';\n      var source = ui;\n      compress(source, outputId);\n    })(ui);\n    (function (uiModel) {\n      var outputId = 'ui-model-im';\n      var source = uiModel;\n      compress(source, outputId);\n    })(uiModel);\n    (function (uiInteraction) {\n      var outputId = 'ui-interaction-im';\n      var source = uiInteraction;\n      compress(source, outputId);\n    })(uiInteraction);\n  } else if (mode === style.API) {\n    (function (usecae) {\n      var outputId = 'usecae-im';\n      var source = usecae;\n      compress(source, outputId);\n    })(usecase);\n    (function (uml) {\n      var outputId = 'class-im';\n      var source = uml;\n      compress(source, outputId);\n    })(uml);\n    (function (erd) {\n      var outputId = 'er-im';\n      var source = erd;\n      compress(source, outputId);\n    })(erd);\n  } else {\n    (function (usecae) {\n      var outputId = 'usecae-im';\n      var source = usecae;\n      compress(source, outputId);\n    })(usecase);\n    (function (ui) {\n      var outputId = 'ui-im';\n      var source = ui;\n      compress(source, outputId);\n    })(ui);\n    (function (uiModel) {\n      var outputId = 'ui-model-im';\n      var source = uiModel;\n      compress(source, outputId);\n    })(uiModel);\n    (function (uiInteraction) {\n      var outputId = 'ui-interaction-im';\n      var source = uiInteraction;\n      compress(source, outputId);\n    })(uiInteraction);\n    (function (uml) {\n      var outputId = 'class-im';\n      var source = uml;\n      compress(source, outputId);\n    })(uml);\n    (function (erd) {\n      var outputId = 'er-im';\n      var source = erd;\n      compress(source, outputId);\n    })(erd);\n  }\n  function encode64(data) {\n    var r = '';\n    for (var i = 0; i < data.length; i += 3) {\n      if (i + 2 == data.length) {\n        r += append3bytes(data.charCodeAt(i), data.charCodeAt(i + 1), 0);\n      } else if (i + 1 == data.length) {\n        r += append3bytes(data.charCodeAt(i), 0, 0);\n      } else {\n        r += append3bytes(data.charCodeAt(i), data.charCodeAt(i + 1), data.charCodeAt(i + 2));\n      }\n    }\n    return r;\n  }\n  function append3bytes(b1, b2, b3) {\n    var c1 = b1 >> 2;\n    var c2 = (b1 & 0x3) << 4 | b2 >> 4;\n    var c3 = (b2 & 0xf) << 2 | b3 >> 6;\n    var c4 = b3 & 0x3f;\n    var r = '';\n    r += encode6bit(c1 & 0x3f);\n    r += encode6bit(c2 & 0x3f);\n    r += encode6bit(c3 & 0x3f);\n    r += encode6bit(c4 & 0x3f);\n    return r;\n  }\n  function encode6bit(b) {\n    if (b < 10) {\n      return String.fromCharCode(48 + b);\n    }\n    b -= 10;\n    if (b < 26) {\n      return String.fromCharCode(65 + b);\n    }\n    b -= 26;\n    if (b < 26) {\n      return String.fromCharCode(97 + b);\n    }\n    b -= 26;\n    if (b == 0) {\n      return '-';\n    }\n    if (b == 1) {\n      return '_';\n    }\n    return '?';\n  }\n  var deflater = window.SharedWorker && new SharedWorker('rawdeflate.js');\n  if (deflater) {\n    deflater.port.addEventListener('message', done_deflating, false);\n    deflater.port.start();\n  } else if (window.Worker) {\n    deflater = new Worker('rawdeflate.js');\n    deflater.onmessage = done_deflating;\n  }\n  function done_deflating(e, id) {\n    document.getElementById(id).src = 'http://www.plantuml.com/plantuml/img/' + encode64(e.data);\n  }\n  function compress(s, id) {\n    //UTF8\n    s = unescape(encodeURIComponent(s));\n    if (deflater) {\n      if (deflater.port && deflater.port.postMessage) {\n        deflater.port.postMessage(s);\n      } else {\n        deflater.postMessage(s);\n      }\n    } else {\n      setTimeout(function () {\n        done_deflating({\n          data: deflate(s)\n        }, id);\n      }, 100);\n    }\n  }\n};\n\n// if run as a web worker, respond to messages by deflating them\nvar deflate = function () {\n  /* Copyright (C) 1999 Masanao Izumo <iz@onicos.co.jp>\r\n   * Version: 1.0.1\r\n   * LastModified: Dec 25 1999\r\n   */\n\n  /* Interface:\r\n   * data = deflate(src);\r\n   */\n\n  /* constant parameters */\n  var zip_WSIZE = 32768; // Sliding Window size\n  var zip_STORED_BLOCK = 0;\n  var zip_STATIC_TREES = 1;\n  var zip_DYN_TREES = 2;\n\n  /* for deflate */\n  var zip_DEFAULT_LEVEL = 6;\n  var zip_FULL_SEARCH = true;\n  var zip_INBUFSIZ = 32768; // Input buffer size\n  var zip_INBUF_EXTRA = 64; // Extra buffer\n  var zip_OUTBUFSIZ = 1024 * 8;\n  var zip_window_size = 2 * zip_WSIZE;\n  var zip_MIN_MATCH = 3;\n  var zip_MAX_MATCH = 258;\n  var zip_BITS = 16;\n  // for SMALL_MEM\n  var zip_LIT_BUFSIZE = 0x2000;\n  var zip_HASH_BITS = 13;\n  // for MEDIUM_MEM\n  // var zip_LIT_BUFSIZE = 0x4000;\n  // var zip_HASH_BITS = 14;\n  // for BIG_MEM\n  // var zip_LIT_BUFSIZE = 0x8000;\n  // var zip_HASH_BITS = 15;\n  //if(zip_LIT_BUFSIZE > zip_INBUFSIZ)\n  //    alert(\"error: zip_INBUFSIZ is too small\");\n  //if((zip_WSIZE<<1) > (1<<zip_BITS))\n  //    alert(\"error: zip_WSIZE is too large\");\n  //if(zip_HASH_BITS > zip_BITS-1)\n  //    alert(\"error: zip_HASH_BITS is too large\");\n  //if(zip_HASH_BITS < 8 || zip_MAX_MATCH != 258)\n  //    alert(\"error: Code too clever\");\n  var zip_DIST_BUFSIZE = zip_LIT_BUFSIZE;\n  var zip_HASH_SIZE = 1 << zip_HASH_BITS;\n  var zip_HASH_MASK = zip_HASH_SIZE - 1;\n  var zip_WMASK = zip_WSIZE - 1;\n  var zip_NIL = 0; // Tail of hash chains\n  var zip_TOO_FAR = 4096;\n  var zip_MIN_LOOKAHEAD = zip_MAX_MATCH + zip_MIN_MATCH + 1;\n  var zip_MAX_DIST = zip_WSIZE - zip_MIN_LOOKAHEAD;\n  var zip_SMALLEST = 1;\n  var zip_MAX_BITS = 15;\n  var zip_MAX_BL_BITS = 7;\n  var zip_LENGTH_CODES = 29;\n  var zip_LITERALS = 256;\n  var zip_END_BLOCK = 256;\n  var zip_L_CODES = zip_LITERALS + 1 + zip_LENGTH_CODES;\n  var zip_D_CODES = 30;\n  var zip_BL_CODES = 19;\n  var zip_REP_3_6 = 16;\n  var zip_REPZ_3_10 = 17;\n  var zip_REPZ_11_138 = 18;\n  var zip_HEAP_SIZE = 2 * zip_L_CODES + 1;\n  var zip_H_SHIFT = parseInt((zip_HASH_BITS + zip_MIN_MATCH - 1) / zip_MIN_MATCH);\n\n  /* variables */\n  var zip_free_queue;\n  var zip_qhead, zip_qtail;\n  var zip_initflag;\n  var zip_outbuf = null;\n  var zip_outcnt, zip_outoff;\n  var zip_complete;\n  var zip_window;\n  var zip_d_buf;\n  var zip_l_buf;\n  var zip_prev;\n  var zip_bi_buf;\n  var zip_bi_valid;\n  var zip_block_start;\n  var zip_ins_h;\n  var zip_hash_head;\n  var zip_prev_match;\n  var zip_match_available;\n  var zip_match_length;\n  var zip_prev_length;\n  var zip_strstart;\n  var zip_match_start;\n  var zip_eofile;\n  var zip_lookahead;\n  var zip_max_chain_length;\n  var zip_max_lazy_match;\n  var zip_compr_level;\n  var zip_good_match;\n  var zip_nice_match;\n  var zip_dyn_ltree;\n  var zip_dyn_dtree;\n  var zip_static_ltree;\n  var zip_static_dtree;\n  var zip_bl_tree;\n  var zip_l_desc;\n  var zip_d_desc;\n  var zip_bl_desc;\n  var zip_bl_count;\n  var zip_heap;\n  var zip_heap_len;\n  var zip_heap_max;\n  var zip_depth;\n  var zip_length_code;\n  var zip_dist_code;\n  var zip_base_length;\n  var zip_base_dist;\n  var zip_flag_buf;\n  var zip_last_lit;\n  var zip_last_dist;\n  var zip_last_flags;\n  var zip_flags;\n  var zip_flag_bit;\n  var zip_opt_len;\n  var zip_static_len;\n  var zip_deflate_data;\n  var zip_deflate_pos;\n\n  /* objects (deflate) */\n\n  function zip_DeflateCT() {\n    this.fc = 0; // frequency count or bit string\n    this.dl = 0; // father node in Huffman tree or length of bit string\n  }\n\n  function zip_DeflateTreeDesc() {\n    this.dyn_tree = null; // the dynamic tree\n    this.static_tree = null; // corresponding static tree or NULL\n    this.extra_bits = null; // extra bits for each code or NULL\n    this.extra_base = 0; // base index for extra_bits\n    this.elems = 0; // max number of elements in the tree\n    this.max_length = 0; // max bit length for the codes\n    this.max_code = 0; // largest code with non zero frequency\n  }\n\n  /* Values for max_lazy_match, good_match and max_chain_length, depending on\r\n   * the desired pack level (0..9). The values given below have been tuned to\r\n   * exclude worst case performance for pathological files. Better values may be\r\n   * found for specific files.\r\n   */\n  function zip_DeflateConfiguration(a, b, c, d) {\n    this.good_length = a; // reduce lazy search above this match length\n    this.max_lazy = b; // do not perform lazy search above this match length\n    this.nice_length = c; // quit search above this match length\n    this.max_chain = d;\n  }\n  function zip_DeflateBuffer() {\n    this.next = null;\n    this.len = 0;\n    this.ptr = new Array(zip_OUTBUFSIZ);\n    this.off = 0;\n  }\n\n  /* constant tables */\n  var zip_extra_lbits = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];\n  var zip_extra_dbits = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];\n  var zip_extra_blbits = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];\n  var zip_bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\n  var zip_configuration_table = [new zip_DeflateConfiguration(0, 0, 0, 0), new zip_DeflateConfiguration(4, 4, 8, 4), new zip_DeflateConfiguration(4, 5, 16, 8), new zip_DeflateConfiguration(4, 6, 32, 32), new zip_DeflateConfiguration(4, 4, 16, 16), new zip_DeflateConfiguration(8, 16, 32, 32), new zip_DeflateConfiguration(8, 16, 128, 128), new zip_DeflateConfiguration(8, 32, 128, 256), new zip_DeflateConfiguration(32, 128, 258, 1024), new zip_DeflateConfiguration(32, 258, 258, 4096)];\n\n  /* routines (deflate) */\n\n  function zip_deflate_start(level) {\n    var i;\n    if (!level) level = zip_DEFAULT_LEVEL;else if (level < 1) level = 1;else if (level > 9) level = 9;\n    zip_compr_level = level;\n    zip_initflag = false;\n    zip_eofile = false;\n    if (zip_outbuf != null) return;\n    zip_free_queue = zip_qhead = zip_qtail = null;\n    zip_outbuf = new Array(zip_OUTBUFSIZ);\n    zip_window = new Array(zip_window_size);\n    zip_d_buf = new Array(zip_DIST_BUFSIZE);\n    zip_l_buf = new Array(zip_INBUFSIZ + zip_INBUF_EXTRA);\n    zip_prev = new Array(1 << zip_BITS);\n    zip_dyn_ltree = new Array(zip_HEAP_SIZE);\n    for (i = 0; i < zip_HEAP_SIZE; i++) zip_dyn_ltree[i] = new zip_DeflateCT();\n    zip_dyn_dtree = new Array(2 * zip_D_CODES + 1);\n    for (i = 0; i < 2 * zip_D_CODES + 1; i++) zip_dyn_dtree[i] = new zip_DeflateCT();\n    zip_static_ltree = new Array(zip_L_CODES + 2);\n    for (i = 0; i < zip_L_CODES + 2; i++) zip_static_ltree[i] = new zip_DeflateCT();\n    zip_static_dtree = new Array(zip_D_CODES);\n    for (i = 0; i < zip_D_CODES; i++) zip_static_dtree[i] = new zip_DeflateCT();\n    zip_bl_tree = new Array(2 * zip_BL_CODES + 1);\n    for (i = 0; i < 2 * zip_BL_CODES + 1; i++) zip_bl_tree[i] = new zip_DeflateCT();\n    zip_l_desc = new zip_DeflateTreeDesc();\n    zip_d_desc = new zip_DeflateTreeDesc();\n    zip_bl_desc = new zip_DeflateTreeDesc();\n    zip_bl_count = new Array(zip_MAX_BITS + 1);\n    zip_heap = new Array(2 * zip_L_CODES + 1);\n    zip_depth = new Array(2 * zip_L_CODES + 1);\n    zip_length_code = new Array(zip_MAX_MATCH - zip_MIN_MATCH + 1);\n    zip_dist_code = new Array(512);\n    zip_base_length = new Array(zip_LENGTH_CODES);\n    zip_base_dist = new Array(zip_D_CODES);\n    zip_flag_buf = new Array(parseInt(zip_LIT_BUFSIZE / 8));\n  }\n  function zip_deflate_end() {\n    zip_free_queue = zip_qhead = zip_qtail = null;\n    zip_outbuf = null;\n    zip_window = null;\n    zip_d_buf = null;\n    zip_l_buf = null;\n    zip_prev = null;\n    zip_dyn_ltree = null;\n    zip_dyn_dtree = null;\n    zip_static_ltree = null;\n    zip_static_dtree = null;\n    zip_bl_tree = null;\n    zip_l_desc = null;\n    zip_d_desc = null;\n    zip_bl_desc = null;\n    zip_bl_count = null;\n    zip_heap = null;\n    zip_depth = null;\n    zip_length_code = null;\n    zip_dist_code = null;\n    zip_base_length = null;\n    zip_base_dist = null;\n    zip_flag_buf = null;\n  }\n  function zip_reuse_queue(p) {\n    p.next = zip_free_queue;\n    zip_free_queue = p;\n  }\n  function zip_new_queue() {\n    var p;\n    if (zip_free_queue != null) {\n      p = zip_free_queue;\n      zip_free_queue = zip_free_queue.next;\n    } else p = new zip_DeflateBuffer();\n    p.next = null;\n    p.len = p.off = 0;\n    return p;\n  }\n  function zip_head1(i) {\n    return zip_prev[zip_WSIZE + i];\n  }\n  function zip_head2(i, val) {\n    return zip_prev[zip_WSIZE + i] = val;\n  }\n\n  /* put_byte is used for the compressed output, put_ubyte for the\r\n   * uncompressed output. However unlzw() uses window for its\r\n   * suffix table instead of its output buffer, so it does not use put_ubyte\r\n   * (to be cleaned up).\r\n   */\n  function zip_put_byte(c) {\n    zip_outbuf[zip_outoff + zip_outcnt++] = c;\n    if (zip_outoff + zip_outcnt == zip_OUTBUFSIZ) zip_qoutbuf();\n  }\n\n  /* Output a 16 bit value, lsb first */\n  function zip_put_short(w) {\n    w &= 0xffff;\n    if (zip_outoff + zip_outcnt < zip_OUTBUFSIZ - 2) {\n      zip_outbuf[zip_outoff + zip_outcnt++] = w & 0xff;\n      zip_outbuf[zip_outoff + zip_outcnt++] = w >>> 8;\n    } else {\n      zip_put_byte(w & 0xff);\n      zip_put_byte(w >>> 8);\n    }\n  }\n\n  /* ==========================================================================\r\n   * Insert string s in the dictionary and set match_head to the previous head\r\n   * of the hash chain (the most recent string with same hash key). Return\r\n   * the previous length of the hash chain.\r\n   * IN  assertion: all calls to to INSERT_STRING are made with consecutive\r\n   *    input characters and the first MIN_MATCH bytes of s are valid\r\n   *    (except for the last MIN_MATCH-1 bytes of the input file).\r\n   */\n  function zip_INSERT_STRING() {\n    zip_ins_h = (zip_ins_h << zip_H_SHIFT ^ zip_window[zip_strstart + zip_MIN_MATCH - 1] & 0xff) & zip_HASH_MASK;\n    zip_hash_head = zip_head1(zip_ins_h);\n    zip_prev[zip_strstart & zip_WMASK] = zip_hash_head;\n    zip_head2(zip_ins_h, zip_strstart);\n  }\n\n  /* Send a code of the given tree. c and tree must not have side effects */\n  function zip_SEND_CODE(c, tree) {\n    zip_send_bits(tree[c].fc, tree[c].dl);\n  }\n\n  /* Mapping from a distance to a distance code. dist is the distance - 1 and\r\n   * must not have side effects. dist_code[256] and dist_code[257] are never\r\n   * used.\r\n   */\n  function zip_D_CODE(dist) {\n    return (dist < 256 ? zip_dist_code[dist] : zip_dist_code[256 + (dist >> 7)]) & 0xff;\n  }\n\n  /* ==========================================================================\r\n   * Compares to subtrees, using the tree depth as tie breaker when\r\n   * the subtrees have equal frequency. This minimizes the worst case length.\r\n   */\n  function zip_SMALLER(tree, n, m) {\n    return tree[n].fc < tree[m].fc || tree[n].fc == tree[m].fc && zip_depth[n] <= zip_depth[m];\n  }\n\n  /* ==========================================================================\r\n   * read string data\r\n   */\n  function zip_read_buff(buff, offset, n) {\n    var i;\n    for (i = 0; i < n && zip_deflate_pos < zip_deflate_data.length; i++) buff[offset + i] = zip_deflate_data.charCodeAt(zip_deflate_pos++) & 0xff;\n    return i;\n  }\n\n  /* ==========================================================================\r\n   * Initialize the \"longest match\" routines for a new file\r\n   */\n  function zip_lm_init() {\n    var j;\n\n    /* Initialize the hash table. */\n    for (j = 0; j < zip_HASH_SIZE; j++)\n    //\tzip_head2(j, zip_NIL);\n    zip_prev[zip_WSIZE + j] = 0;\n    /* prev will be initialized on the fly */\n\n    /* Set the default configuration parameters:\r\n     */\n    zip_max_lazy_match = zip_configuration_table[zip_compr_level].max_lazy;\n    zip_good_match = zip_configuration_table[zip_compr_level].good_length;\n    if (!zip_FULL_SEARCH) zip_nice_match = zip_configuration_table[zip_compr_level].nice_length;\n    zip_max_chain_length = zip_configuration_table[zip_compr_level].max_chain;\n    zip_strstart = 0;\n    zip_block_start = 0;\n    zip_lookahead = zip_read_buff(zip_window, 0, 2 * zip_WSIZE);\n    if (zip_lookahead <= 0) {\n      zip_eofile = true;\n      zip_lookahead = 0;\n      return;\n    }\n    zip_eofile = false;\n    /* Make sure that we always have enough lookahead. This is important\r\n     * if input comes from a device such as a tty.\r\n     */\n    while (zip_lookahead < zip_MIN_LOOKAHEAD && !zip_eofile) zip_fill_window();\n\n    /* If lookahead < MIN_MATCH, ins_h is garbage, but this is\r\n     * not important since only literal bytes will be emitted.\r\n     */\n    zip_ins_h = 0;\n    for (j = 0; j < zip_MIN_MATCH - 1; j++) {\n      //      UPDATE_HASH(ins_h, window[j]);\n      zip_ins_h = (zip_ins_h << zip_H_SHIFT ^ zip_window[j] & 0xff) & zip_HASH_MASK;\n    }\n  }\n\n  /* ==========================================================================\r\n   * Set match_start to the longest match starting at the given string and\r\n   * return its length. Matches shorter or equal to prev_length are discarded,\r\n   * in which case the result is equal to prev_length and match_start is\r\n   * garbage.\r\n   * IN assertions: cur_match is the head of the hash chain for the current\r\n   *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\r\n   */\n  function zip_longest_match(cur_match) {\n    var chain_length = zip_max_chain_length; // max hash chain length\n    var scanp = zip_strstart; // current string\n    var matchp; // matched string\n    var len; // length of current match\n    var best_len = zip_prev_length; // best match length so far\n\n    /* Stop when cur_match becomes <= limit. To simplify the code,\r\n     * we prevent matches with the string of window index 0.\r\n     */\n    var limit = zip_strstart > zip_MAX_DIST ? zip_strstart - zip_MAX_DIST : zip_NIL;\n    var strendp = zip_strstart + zip_MAX_MATCH;\n    var scan_end1 = zip_window[scanp + best_len - 1];\n    var scan_end = zip_window[scanp + best_len];\n\n    /* Do not waste too much time if we already have a good match: */\n    if (zip_prev_length >= zip_good_match) chain_length >>= 2;\n\n    //  Assert(encoder->strstart <= window_size-MIN_LOOKAHEAD, \"insufficient lookahead\");\n\n    do {\n      //    Assert(cur_match < encoder->strstart, \"no future\");\n      matchp = cur_match;\n\n      /* Skip to next match if the match length cannot increase\r\n       * or if the match length is less than 2:\r\n       */\n      if (zip_window[matchp + best_len] != scan_end || zip_window[matchp + best_len - 1] != scan_end1 || zip_window[matchp] != zip_window[scanp] || zip_window[++matchp] != zip_window[scanp + 1]) {\n        continue;\n      }\n\n      /* The check at best_len-1 can be removed because it will be made\r\n       * again later. (This heuristic is not always a win.)\r\n       * It is not necessary to compare scan[2] and match[2] since they\r\n       * are always equal when the other bytes match, given that\r\n       * the hash keys are equal and that HASH_BITS >= 8.\r\n       */\n      scanp += 2;\n      matchp++;\n\n      /* We check for insufficient lookahead only every 8th comparison;\r\n       * the 256th check will be made at strstart+258.\r\n       */\n      do {} while (zip_window[++scanp] == zip_window[++matchp] && zip_window[++scanp] == zip_window[++matchp] && zip_window[++scanp] == zip_window[++matchp] && zip_window[++scanp] == zip_window[++matchp] && zip_window[++scanp] == zip_window[++matchp] && zip_window[++scanp] == zip_window[++matchp] && zip_window[++scanp] == zip_window[++matchp] && zip_window[++scanp] == zip_window[++matchp] && scanp < strendp);\n      len = zip_MAX_MATCH - (strendp - scanp);\n      scanp = strendp - zip_MAX_MATCH;\n      if (len > best_len) {\n        zip_match_start = cur_match;\n        best_len = len;\n        if (zip_FULL_SEARCH) {\n          if (len >= zip_MAX_MATCH) break;\n        } else {\n          if (len >= zip_nice_match) break;\n        }\n        scan_end1 = zip_window[scanp + best_len - 1];\n        scan_end = zip_window[scanp + best_len];\n      }\n    } while ((cur_match = zip_prev[cur_match & zip_WMASK]) > limit && --chain_length != 0);\n    return best_len;\n  }\n\n  /* ==========================================================================\r\n   * Fill the window when the lookahead becomes insufficient.\r\n   * Updates strstart and lookahead, and sets eofile if end of input file.\r\n   * IN assertion: lookahead < MIN_LOOKAHEAD && strstart + lookahead > 0\r\n   * OUT assertions: at least one byte has been read, or eofile is set;\r\n   *    file reads are performed for at least two bytes (required for the\r\n   *    translate_eol option).\r\n   */\n  function zip_fill_window() {\n    var n, m;\n\n    // Amount of free space at the end of the window.\n    var more = zip_window_size - zip_lookahead - zip_strstart;\n\n    /* If the window is almost full and there is insufficient lookahead,\r\n     * move the upper half to the lower one to make room in the upper half.\r\n     */\n    if (more == -1) {\n      /* Very unlikely, but possible on 16 bit machine if strstart == 0\r\n       * and lookahead == 1 (input done one byte at time)\r\n       */\n      more--;\n    } else if (zip_strstart >= zip_WSIZE + zip_MAX_DIST) {\n      /* By the IN assertion, the window is not empty so we can't confuse\r\n       * more == 0 with more == 64K on a 16 bit machine.\r\n       */\n      //\tAssert(window_size == (ulg)2*WSIZE, \"no sliding with BIG_MEM\");\n\n      //\tSystem.arraycopy(window, WSIZE, window, 0, WSIZE);\n      for (n = 0; n < zip_WSIZE; n++) zip_window[n] = zip_window[n + zip_WSIZE];\n      zip_match_start -= zip_WSIZE;\n      zip_strstart -= zip_WSIZE; /* we now have strstart >= MAX_DIST: */\n      zip_block_start -= zip_WSIZE;\n      for (n = 0; n < zip_HASH_SIZE; n++) {\n        m = zip_head1(n);\n        zip_head2(n, m >= zip_WSIZE ? m - zip_WSIZE : zip_NIL);\n      }\n      for (n = 0; n < zip_WSIZE; n++) {\n        /* If n is not on any hash chain, prev[n] is garbage but\r\n         * its value will never be used.\r\n         */\n        m = zip_prev[n];\n        zip_prev[n] = m >= zip_WSIZE ? m - zip_WSIZE : zip_NIL;\n      }\n      more += zip_WSIZE;\n    }\n    // At this point, more >= 2\n    if (!zip_eofile) {\n      n = zip_read_buff(zip_window, zip_strstart + zip_lookahead, more);\n      if (n <= 0) zip_eofile = true;else zip_lookahead += n;\n    }\n  }\n\n  /* ==========================================================================\r\n   * Processes a new input file and return its compressed length. This\r\n   * function does not perform lazy evaluationof matches and inserts\r\n   * new strings in the dictionary only for unmatched strings or for short\r\n   * matches. It is used only for the fast compression options.\r\n   */\n  function zip_deflate_fast() {\n    while (zip_lookahead != 0 && zip_qhead == null) {\n      var flush; // set if current block must be flushed\n\n      /* Insert the string window[strstart .. strstart+2] in the\r\n       * dictionary, and set hash_head to the head of the hash chain:\r\n       */\n      zip_INSERT_STRING();\n\n      /* Find the longest match, discarding those <= prev_length.\r\n       * At this point we have always match_length < MIN_MATCH\r\n       */\n      if (zip_hash_head != zip_NIL && zip_strstart - zip_hash_head <= zip_MAX_DIST) {\n        /* To simplify the code, we prevent matches with the string\r\n         * of window index 0 (in particular we have to avoid a match\r\n         * of the string with itself at the start of the input file).\r\n         */\n        zip_match_length = zip_longest_match(zip_hash_head);\n        /* longest_match() sets match_start */\n        if (zip_match_length > zip_lookahead) zip_match_length = zip_lookahead;\n      }\n      if (zip_match_length >= zip_MIN_MATCH) {\n        //\t    check_match(strstart, match_start, match_length);\n\n        flush = zip_ct_tally(zip_strstart - zip_match_start, zip_match_length - zip_MIN_MATCH);\n        zip_lookahead -= zip_match_length;\n\n        /* Insert new strings in the hash table only if the match length\r\n         * is not too large. This saves time but degrades compression.\r\n         */\n        if (zip_match_length <= zip_max_lazy_match) {\n          zip_match_length--; // string at strstart already in hash table\n          do {\n            zip_strstart++;\n            zip_INSERT_STRING();\n            /* strstart never exceeds WSIZE-MAX_MATCH, so there are\r\n             * always MIN_MATCH bytes ahead. If lookahead < MIN_MATCH\r\n             * these bytes are garbage, but it does not matter since\r\n             * the next lookahead bytes will be emitted as literals.\r\n             */\n          } while (--zip_match_length != 0);\n          zip_strstart++;\n        } else {\n          zip_strstart += zip_match_length;\n          zip_match_length = 0;\n          zip_ins_h = zip_window[zip_strstart] & 0xff;\n          //\t\tUPDATE_HASH(ins_h, window[strstart + 1]);\n          zip_ins_h = (zip_ins_h << zip_H_SHIFT ^ zip_window[zip_strstart + 1] & 0xff) & zip_HASH_MASK;\n\n          //#if MIN_MATCH != 3\n          //\t\tCall UPDATE_HASH() MIN_MATCH-3 more times\n          //#endif\n        }\n      } else {\n        /* No match, output a literal byte */\n        flush = zip_ct_tally(0, zip_window[zip_strstart] & 0xff);\n        zip_lookahead--;\n        zip_strstart++;\n      }\n      if (flush) {\n        zip_flush_block(0);\n        zip_block_start = zip_strstart;\n      }\n\n      /* Make sure that we always have enough lookahead, except\r\n       * at the end of the input file. We need MAX_MATCH bytes\r\n       * for the next match, plus MIN_MATCH bytes to insert the\r\n       * string following the next match.\r\n       */\n      while (zip_lookahead < zip_MIN_LOOKAHEAD && !zip_eofile) zip_fill_window();\n    }\n  }\n  function zip_deflate_better() {\n    /* Process the input block. */\n    while (zip_lookahead != 0 && zip_qhead == null) {\n      /* Insert the string window[strstart .. strstart+2] in the\r\n       * dictionary, and set hash_head to the head of the hash chain:\r\n       */\n      zip_INSERT_STRING();\n\n      /* Find the longest match, discarding those <= prev_length.\r\n       */\n      zip_prev_length = zip_match_length;\n      zip_prev_match = zip_match_start;\n      zip_match_length = zip_MIN_MATCH - 1;\n      if (zip_hash_head != zip_NIL && zip_prev_length < zip_max_lazy_match && zip_strstart - zip_hash_head <= zip_MAX_DIST) {\n        /* To simplify the code, we prevent matches with the string\r\n         * of window index 0 (in particular we have to avoid a match\r\n         * of the string with itself at the start of the input file).\r\n         */\n        zip_match_length = zip_longest_match(zip_hash_head);\n        /* longest_match() sets match_start */\n        if (zip_match_length > zip_lookahead) zip_match_length = zip_lookahead;\n\n        /* Ignore a length 3 match if it is too distant: */\n        if (zip_match_length == zip_MIN_MATCH && zip_strstart - zip_match_start > zip_TOO_FAR) {\n          /* If prev_match is also MIN_MATCH, match_start is garbage\r\n           * but we will ignore the current match anyway.\r\n           */\n          zip_match_length--;\n        }\n      }\n      /* If there was a match at the previous step and the current\r\n       * match is not better, output the previous match:\r\n       */\n      if (zip_prev_length >= zip_MIN_MATCH && zip_match_length <= zip_prev_length) {\n        var flush; // set if current block must be flushed\n\n        //\t    check_match(strstart - 1, prev_match, prev_length);\n        flush = zip_ct_tally(zip_strstart - 1 - zip_prev_match, zip_prev_length - zip_MIN_MATCH);\n\n        /* Insert in hash table all strings up to the end of the match.\r\n         * strstart-1 and strstart are already inserted.\r\n         */\n        zip_lookahead -= zip_prev_length - 1;\n        zip_prev_length -= 2;\n        do {\n          zip_strstart++;\n          zip_INSERT_STRING();\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\r\n           * always MIN_MATCH bytes ahead. If lookahead < MIN_MATCH\r\n           * these bytes are garbage, but it does not matter since the\r\n           * next lookahead bytes will always be emitted as literals.\r\n           */\n        } while (--zip_prev_length != 0);\n        zip_match_available = 0;\n        zip_match_length = zip_MIN_MATCH - 1;\n        zip_strstart++;\n        if (flush) {\n          zip_flush_block(0);\n          zip_block_start = zip_strstart;\n        }\n      } else if (zip_match_available != 0) {\n        /* If there was no match at the previous position, output a\r\n         * single literal. If there was a match but the current match\r\n         * is longer, truncate the previous match to a single literal.\r\n         */\n        if (zip_ct_tally(0, zip_window[zip_strstart - 1] & 0xff)) {\n          zip_flush_block(0);\n          zip_block_start = zip_strstart;\n        }\n        zip_strstart++;\n        zip_lookahead--;\n      } else {\n        /* There is no previous match to compare with, wait for\r\n         * the next step to decide.\r\n         */\n        zip_match_available = 1;\n        zip_strstart++;\n        zip_lookahead--;\n      }\n\n      /* Make sure that we always have enough lookahead, except\r\n       * at the end of the input file. We need MAX_MATCH bytes\r\n       * for the next match, plus MIN_MATCH bytes to insert the\r\n       * string following the next match.\r\n       */\n      while (zip_lookahead < zip_MIN_LOOKAHEAD && !zip_eofile) zip_fill_window();\n    }\n  }\n  function zip_init_deflate() {\n    if (zip_eofile) return;\n    zip_bi_buf = 0;\n    zip_bi_valid = 0;\n    zip_ct_init();\n    zip_lm_init();\n    zip_qhead = null;\n    zip_outcnt = 0;\n    zip_outoff = 0;\n    if (zip_compr_level <= 3) {\n      zip_prev_length = zip_MIN_MATCH - 1;\n      zip_match_length = 0;\n    } else {\n      zip_match_length = zip_MIN_MATCH - 1;\n      zip_match_available = 0;\n    }\n    zip_complete = false;\n  }\n\n  /* ==========================================================================\r\n   * Same as above, but achieves better compression. We use a lazy\r\n   * evaluation for matches: a match is finally adopted only if there is\r\n   * no better match at the next window position.\r\n   */\n  function zip_deflate_internal(buff, off, buff_size) {\n    var n;\n    if (!zip_initflag) {\n      zip_init_deflate();\n      zip_initflag = true;\n      if (zip_lookahead == 0) {\n        // empty\n        zip_complete = true;\n        return 0;\n      }\n    }\n    if ((n = zip_qcopy(buff, off, buff_size)) == buff_size) return buff_size;\n    if (zip_complete) return n;\n    if (zip_compr_level <= 3)\n      // optimized for speed\n      zip_deflate_fast();else zip_deflate_better();\n    if (zip_lookahead == 0) {\n      if (zip_match_available != 0) zip_ct_tally(0, zip_window[zip_strstart - 1] & 0xff);\n      zip_flush_block(1);\n      zip_complete = true;\n    }\n    return n + zip_qcopy(buff, n + off, buff_size - n);\n  }\n  function zip_qcopy(buff, off, buff_size) {\n    var n, i, j;\n    n = 0;\n    while (zip_qhead != null && n < buff_size) {\n      i = buff_size - n;\n      if (i > zip_qhead.len) i = zip_qhead.len;\n      //      System.arraycopy(qhead.ptr, qhead.off, buff, off + n, i);\n      for (j = 0; j < i; j++) buff[off + n + j] = zip_qhead.ptr[zip_qhead.off + j];\n      zip_qhead.off += i;\n      zip_qhead.len -= i;\n      n += i;\n      if (zip_qhead.len == 0) {\n        var p;\n        p = zip_qhead;\n        zip_qhead = zip_qhead.next;\n        zip_reuse_queue(p);\n      }\n    }\n    if (n == buff_size) return n;\n    if (zip_outoff < zip_outcnt) {\n      i = buff_size - n;\n      if (i > zip_outcnt - zip_outoff) i = zip_outcnt - zip_outoff;\n      // System.arraycopy(outbuf, outoff, buff, off + n, i);\n      for (j = 0; j < i; j++) buff[off + n + j] = zip_outbuf[zip_outoff + j];\n      zip_outoff += i;\n      n += i;\n      if (zip_outcnt == zip_outoff) zip_outcnt = zip_outoff = 0;\n    }\n    return n;\n  }\n\n  /* ==========================================================================\r\n   * Allocate the match buffer, initialize the various tables and save the\r\n   * location of the internal file attribute (ascii/binary) and method\r\n   * (DEFLATE/STORE).\r\n   */\n  function zip_ct_init() {\n    var n; // iterates over tree elements\n    var bits; // bit counter\n    var length; // length value\n    var code; // code value\n    var dist; // distance index\n\n    if (zip_static_dtree[0].dl != 0) return; // ct_init already called\n\n    zip_l_desc.dyn_tree = zip_dyn_ltree;\n    zip_l_desc.static_tree = zip_static_ltree;\n    zip_l_desc.extra_bits = zip_extra_lbits;\n    zip_l_desc.extra_base = zip_LITERALS + 1;\n    zip_l_desc.elems = zip_L_CODES;\n    zip_l_desc.max_length = zip_MAX_BITS;\n    zip_l_desc.max_code = 0;\n    zip_d_desc.dyn_tree = zip_dyn_dtree;\n    zip_d_desc.static_tree = zip_static_dtree;\n    zip_d_desc.extra_bits = zip_extra_dbits;\n    zip_d_desc.extra_base = 0;\n    zip_d_desc.elems = zip_D_CODES;\n    zip_d_desc.max_length = zip_MAX_BITS;\n    zip_d_desc.max_code = 0;\n    zip_bl_desc.dyn_tree = zip_bl_tree;\n    zip_bl_desc.static_tree = null;\n    zip_bl_desc.extra_bits = zip_extra_blbits;\n    zip_bl_desc.extra_base = 0;\n    zip_bl_desc.elems = zip_BL_CODES;\n    zip_bl_desc.max_length = zip_MAX_BL_BITS;\n    zip_bl_desc.max_code = 0;\n\n    // Initialize the mapping length (0..255) -> length code (0..28)\n    length = 0;\n    for (code = 0; code < zip_LENGTH_CODES - 1; code++) {\n      zip_base_length[code] = length;\n      for (n = 0; n < 1 << zip_extra_lbits[code]; n++) zip_length_code[length++] = code;\n    }\n    // Assert (length == 256, \"ct_init: length != 256\");\n\n    /* Note that the length 255 (match length 258) can be represented\r\n     * in two different ways: code 284 + 5 bits or code 285, so we\r\n     * overwrite length_code[255] to use the best encoding:\r\n     */\n    zip_length_code[length - 1] = code;\n\n    /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n    dist = 0;\n    for (code = 0; code < 16; code++) {\n      zip_base_dist[code] = dist;\n      for (n = 0; n < 1 << zip_extra_dbits[code]; n++) {\n        zip_dist_code[dist++] = code;\n      }\n    }\n    // Assert (dist == 256, \"ct_init: dist != 256\");\n    dist >>= 7; // from now on, all distances are divided by 128\n    for (; code < zip_D_CODES; code++) {\n      zip_base_dist[code] = dist << 7;\n      for (n = 0; n < 1 << zip_extra_dbits[code] - 7; n++) zip_dist_code[256 + dist++] = code;\n    }\n    // Assert (dist == 256, \"ct_init: 256+dist != 512\");\n\n    // Construct the codes of the static literal tree\n    for (bits = 0; bits <= zip_MAX_BITS; bits++) zip_bl_count[bits] = 0;\n    n = 0;\n    while (n <= 143) {\n      zip_static_ltree[n++].dl = 8;\n      zip_bl_count[8]++;\n    }\n    while (n <= 255) {\n      zip_static_ltree[n++].dl = 9;\n      zip_bl_count[9]++;\n    }\n    while (n <= 279) {\n      zip_static_ltree[n++].dl = 7;\n      zip_bl_count[7]++;\n    }\n    while (n <= 287) {\n      zip_static_ltree[n++].dl = 8;\n      zip_bl_count[8]++;\n    }\n    /* Codes 286 and 287 do not exist, but we must include them in the\r\n     * tree construction to get a canonical Huffman tree (longest code\r\n     * all ones)\r\n     */\n    zip_gen_codes(zip_static_ltree, zip_L_CODES + 1);\n\n    /* The static distance tree is trivial: */\n    for (n = 0; n < zip_D_CODES; n++) {\n      zip_static_dtree[n].dl = 5;\n      zip_static_dtree[n].fc = zip_bi_reverse(n, 5);\n    }\n\n    // Initialize the first block of the first file:\n    zip_init_block();\n  }\n\n  /* ==========================================================================\r\n   * Initialize a new block.\r\n   */\n  function zip_init_block() {\n    var n; // iterates over tree elements\n\n    // Initialize the trees.\n    for (n = 0; n < zip_L_CODES; n++) zip_dyn_ltree[n].fc = 0;\n    for (n = 0; n < zip_D_CODES; n++) zip_dyn_dtree[n].fc = 0;\n    for (n = 0; n < zip_BL_CODES; n++) zip_bl_tree[n].fc = 0;\n    zip_dyn_ltree[zip_END_BLOCK].fc = 1;\n    zip_opt_len = zip_static_len = 0;\n    zip_last_lit = zip_last_dist = zip_last_flags = 0;\n    zip_flags = 0;\n    zip_flag_bit = 1;\n  }\n\n  /* ==========================================================================\r\n   * Restore the heap property by moving down the tree starting at node k,\r\n   * exchanging a node with the smallest of its two sons if necessary, stopping\r\n   * when the heap property is re-established (each father smaller than its\r\n   * two sons).\r\n   */\n  function zip_pqdownheap(tree,\n  // the tree to restore\n  k) {\n    // node to move down\n    var v = zip_heap[k];\n    var j = k << 1; // left son of k\n\n    while (j <= zip_heap_len) {\n      // Set j to the smallest of the two sons:\n      if (j < zip_heap_len && zip_SMALLER(tree, zip_heap[j + 1], zip_heap[j])) j++;\n\n      // Exit if v is smaller than both sons\n      if (zip_SMALLER(tree, v, zip_heap[j])) break;\n\n      // Exchange v with the smallest son\n      zip_heap[k] = zip_heap[j];\n      k = j;\n\n      // And continue down the tree, setting j to the left son of k\n      j <<= 1;\n    }\n    zip_heap[k] = v;\n  }\n\n  /* ==========================================================================\r\n   * Compute the optimal bit lengths for a tree and update the total bit length\r\n   * for the current block.\r\n   * IN assertion: the fields freq and dad are set, heap[heap_max] and\r\n   *    above are the tree nodes sorted by increasing frequency.\r\n   * OUT assertions: the field len is set to the optimal bit length, the\r\n   *     array bl_count contains the frequencies for each bit length.\r\n   *     The length opt_len is updated; static_len is also updated if stree is\r\n   *     not null.\r\n   */\n  function zip_gen_bitlen(desc) {\n    // the tree descriptor\n    var tree = desc.dyn_tree;\n    var extra = desc.extra_bits;\n    var base = desc.extra_base;\n    var max_code = desc.max_code;\n    var max_length = desc.max_length;\n    var stree = desc.static_tree;\n    var h; // heap index\n    var n, m; // iterate over the tree elements\n    var bits; // bit length\n    var xbits; // extra bits\n    var f; // frequency\n    var overflow = 0; // number of elements with bit length too large\n\n    for (bits = 0; bits <= zip_MAX_BITS; bits++) zip_bl_count[bits] = 0;\n\n    /* In a first pass, compute the optimal bit lengths (which may\r\n     * overflow in the case of the bit length tree).\r\n     */\n    tree[zip_heap[zip_heap_max]].dl = 0; // root of the heap\n\n    for (h = zip_heap_max + 1; h < zip_HEAP_SIZE; h++) {\n      n = zip_heap[h];\n      bits = tree[tree[n].dl].dl + 1;\n      if (bits > max_length) {\n        bits = max_length;\n        overflow++;\n      }\n      tree[n].dl = bits;\n      // We overwrite tree[n].dl which is no longer needed\n\n      if (n > max_code) continue; // not a leaf node\n\n      zip_bl_count[bits]++;\n      xbits = 0;\n      if (n >= base) xbits = extra[n - base];\n      f = tree[n].fc;\n      zip_opt_len += f * (bits + xbits);\n      if (stree != null) zip_static_len += f * (stree[n].dl + xbits);\n    }\n    if (overflow == 0) return;\n\n    // This happens for example on obj2 and pic of the Calgary corpus\n\n    // Find the first bit length which could increase:\n    do {\n      bits = max_length - 1;\n      while (zip_bl_count[bits] == 0) bits--;\n      zip_bl_count[bits]--; // move one leaf down the tree\n      zip_bl_count[bits + 1] += 2; // move one overflow item as its brother\n      zip_bl_count[max_length]--;\n      /* The brother of the overflow item also moves one step up,\r\n       * but this does not affect bl_count[max_length]\r\n       */\n      overflow -= 2;\n    } while (overflow > 0);\n\n    /* Now recompute all bit lengths, scanning in increasing frequency.\r\n     * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\r\n     * lengths instead of fixing only the wrong ones. This idea is taken\r\n     * from 'ar' written by Haruhiko Okumura.)\r\n     */\n    for (bits = max_length; bits != 0; bits--) {\n      n = zip_bl_count[bits];\n      while (n != 0) {\n        m = zip_heap[--h];\n        if (m > max_code) continue;\n        if (tree[m].dl != bits) {\n          zip_opt_len += (bits - tree[m].dl) * tree[m].fc;\n          tree[m].fc = bits;\n        }\n        n--;\n      }\n    }\n  }\n\n  /* ==========================================================================\r\n   * Generate the codes for a given tree and bit counts (which need not be\r\n   * optimal).\r\n   * IN assertion: the array bl_count contains the bit length statistics for\r\n   * the given tree and the field len is set for all tree elements.\r\n   * OUT assertion: the field code is set for all tree elements of non\r\n   *     zero code length.\r\n   */\n  function zip_gen_codes(tree,\n  // the tree to decorate\n  max_code) {\n    // largest code with non zero frequency\n    var next_code = new Array(zip_MAX_BITS + 1); // next code value for each bit length\n    var code = 0; // running code value\n    var bits; // bit index\n    var n; // code index\n\n    /* The distribution counts are first used to generate the code values\r\n     * without bit reversal.\r\n     */\n    for (bits = 1; bits <= zip_MAX_BITS; bits++) {\n      code = code + zip_bl_count[bits - 1] << 1;\n      next_code[bits] = code;\n    }\n\n    /* Check that the bit counts in bl_count are consistent. The last code\r\n     * must be all ones.\r\n     */\n    //    Assert (code + encoder->bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n    //\t    \"inconsistent bit counts\");\n    //    Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n    for (n = 0; n <= max_code; n++) {\n      var len = tree[n].dl;\n      if (len == 0) continue;\n      // Now reverse the bits\n      tree[n].fc = zip_bi_reverse(next_code[len]++, len);\n\n      //      Tracec(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n      //\t  n, (isgraph(n) ? n : ' '), len, tree[n].fc, next_code[len]-1));\n    }\n  }\n\n  /* ==========================================================================\r\n   * Construct one Huffman tree and assigns the code bit strings and lengths.\r\n   * Update the total bit length for the current block.\r\n   * IN assertion: the field freq is set for all tree elements.\r\n   * OUT assertions: the fields len and code are set to the optimal bit length\r\n   *     and corresponding code. The length opt_len is updated; static_len is\r\n   *     also updated if stree is not null. The field max_code is set.\r\n   */\n  function zip_build_tree(desc) {\n    // the tree descriptor\n    var tree = desc.dyn_tree;\n    var stree = desc.static_tree;\n    var elems = desc.elems;\n    var n, m; // iterate over heap elements\n    var max_code = -1; // largest code with non zero frequency\n    var node = elems; // next internal node of the tree\n\n    /* Construct the initial heap, with least frequent element in\r\n     * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\r\n     * heap[0] is not used.\r\n     */\n    zip_heap_len = 0;\n    zip_heap_max = zip_HEAP_SIZE;\n    for (n = 0; n < elems; n++) {\n      if (tree[n].fc != 0) {\n        zip_heap[++zip_heap_len] = max_code = n;\n        zip_depth[n] = 0;\n      } else tree[n].dl = 0;\n    }\n\n    /* The pkzip format requires that at least one distance code exists,\r\n     * and that at least one bit should be sent even if there is only one\r\n     * possible code. So to avoid special checks later on we force at least\r\n     * two codes of non zero frequency.\r\n     */\n    while (zip_heap_len < 2) {\n      var xnew = zip_heap[++zip_heap_len] = max_code < 2 ? ++max_code : 0;\n      tree[xnew].fc = 1;\n      zip_depth[xnew] = 0;\n      zip_opt_len--;\n      if (stree != null) zip_static_len -= stree[xnew].dl;\n      // new is 0 or 1 so it does not have extra bits\n    }\n\n    desc.max_code = max_code;\n\n    /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\r\n     * establish sub-heaps of increasing lengths:\r\n     */\n    for (n = zip_heap_len >> 1; n >= 1; n--) zip_pqdownheap(tree, n);\n\n    /* Construct the Huffman tree by repeatedly combining the least two\r\n     * frequent nodes.\r\n     */\n    do {\n      n = zip_heap[zip_SMALLEST];\n      zip_heap[zip_SMALLEST] = zip_heap[zip_heap_len--];\n      zip_pqdownheap(tree, zip_SMALLEST);\n      m = zip_heap[zip_SMALLEST]; // m = node of next least frequency\n\n      // keep the nodes sorted by frequency\n      zip_heap[--zip_heap_max] = n;\n      zip_heap[--zip_heap_max] = m;\n\n      // Create a new node father of n and m\n      tree[node].fc = tree[n].fc + tree[m].fc;\n      //\tdepth[node] = (char)(MAX(depth[n], depth[m]) + 1);\n      if (zip_depth[n] > zip_depth[m] + 1) zip_depth[node] = zip_depth[n];else zip_depth[node] = zip_depth[m] + 1;\n      tree[n].dl = tree[m].dl = node;\n\n      // and insert the new node in the heap\n      zip_heap[zip_SMALLEST] = node++;\n      zip_pqdownheap(tree, zip_SMALLEST);\n    } while (zip_heap_len >= 2);\n    zip_heap[--zip_heap_max] = zip_heap[zip_SMALLEST];\n\n    /* At this point, the fields freq and dad are set. We can now\r\n     * generate the bit lengths.\r\n     */\n    zip_gen_bitlen(desc);\n\n    // The field len is now set, we can generate the bit codes\n    zip_gen_codes(tree, max_code);\n  }\n\n  /* ==========================================================================\r\n   * Scan a literal or distance tree to determine the frequencies of the codes\r\n   * in the bit length tree. Updates opt_len to take into account the repeat\r\n   * counts. (The contribution of the bit length codes will be added later\r\n   * during the construction of bl_tree.)\r\n   */\n  function zip_scan_tree(tree,\n  // the tree to be scanned\n  max_code) {\n    // and its largest code of non zero frequency\n    var n; // iterates over all tree elements\n    var prevlen = -1; // last emitted length\n    var curlen; // length of current code\n    var nextlen = tree[0].dl; // length of next code\n    var count = 0; // repeat count of the current code\n    var max_count = 7; // max repeat count\n    var min_count = 4; // min repeat count\n\n    if (nextlen == 0) {\n      max_count = 138;\n      min_count = 3;\n    }\n    tree[max_code + 1].dl = 0xffff; // guard\n\n    for (n = 0; n <= max_code; n++) {\n      curlen = nextlen;\n      nextlen = tree[n + 1].dl;\n      if (++count < max_count && curlen == nextlen) continue;else if (count < min_count) zip_bl_tree[curlen].fc += count;else if (curlen != 0) {\n        if (curlen != prevlen) zip_bl_tree[curlen].fc++;\n        zip_bl_tree[zip_REP_3_6].fc++;\n      } else if (count <= 10) zip_bl_tree[zip_REPZ_3_10].fc++;else zip_bl_tree[zip_REPZ_11_138].fc++;\n      count = 0;\n      prevlen = curlen;\n      if (nextlen == 0) {\n        max_count = 138;\n        min_count = 3;\n      } else if (curlen == nextlen) {\n        max_count = 6;\n        min_count = 3;\n      } else {\n        max_count = 7;\n        min_count = 4;\n      }\n    }\n  }\n\n  /* ==========================================================================\r\n   * Send a literal or distance tree in compressed form, using the codes in\r\n   * bl_tree.\r\n   */\n  function zip_send_tree(tree,\n  // the tree to be scanned\n  max_code) {\n    // and its largest code of non zero frequency\n    var n; // iterates over all tree elements\n    var prevlen = -1; // last emitted length\n    var curlen; // length of current code\n    var nextlen = tree[0].dl; // length of next code\n    var count = 0; // repeat count of the current code\n    var max_count = 7; // max repeat count\n    var min_count = 4; /* guard already set */ // min repeat count\n\n    /* tree[max_code+1].dl = -1; */\n    if (nextlen == 0) {\n      max_count = 138;\n      min_count = 3;\n    }\n    for (n = 0; n <= max_code; n++) {\n      curlen = nextlen;\n      nextlen = tree[n + 1].dl;\n      if (++count < max_count && curlen == nextlen) {\n        continue;\n      } else if (count < min_count) {\n        do {\n          zip_SEND_CODE(curlen, zip_bl_tree);\n        } while (--count != 0);\n      } else if (curlen != 0) {\n        if (curlen != prevlen) {\n          zip_SEND_CODE(curlen, zip_bl_tree);\n          count--;\n        }\n        // Assert(count >= 3 && count <= 6, \" 3_6?\");\n        zip_SEND_CODE(zip_REP_3_6, zip_bl_tree);\n        zip_send_bits(count - 3, 2);\n      } else if (count <= 10) {\n        zip_SEND_CODE(zip_REPZ_3_10, zip_bl_tree);\n        zip_send_bits(count - 3, 3);\n      } else {\n        zip_SEND_CODE(zip_REPZ_11_138, zip_bl_tree);\n        zip_send_bits(count - 11, 7);\n      }\n      count = 0;\n      prevlen = curlen;\n      if (nextlen == 0) {\n        max_count = 138;\n        min_count = 3;\n      } else if (curlen == nextlen) {\n        max_count = 6;\n        min_count = 3;\n      } else {\n        max_count = 7;\n        min_count = 4;\n      }\n    }\n  }\n\n  /* ==========================================================================\r\n   * Construct the Huffman tree for the bit lengths and return the index in\r\n   * bl_order of the last bit length code to send.\r\n   */\n  function zip_build_bl_tree() {\n    var max_blindex; // index of last bit length code of non zero freq\n\n    // Determine the bit length frequencies for literal and distance trees\n    zip_scan_tree(zip_dyn_ltree, zip_l_desc.max_code);\n    zip_scan_tree(zip_dyn_dtree, zip_d_desc.max_code);\n\n    // Build the bit length tree:\n    zip_build_tree(zip_bl_desc);\n    /* opt_len now includes the length of the tree representations, except\r\n     * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\r\n     */\n\n    /* Determine the number of bit length codes to send. The pkzip format\r\n     * requires that at least 4 bit length codes be sent. (appnote.txt says\r\n     * 3 but the actual value used is 4.)\r\n     */\n    for (max_blindex = zip_BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n      if (zip_bl_tree[zip_bl_order[max_blindex]].dl != 0) break;\n    }\n    /* Update opt_len to include the bit length tree and counts */\n    zip_opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n    //    Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n    //\t    encoder->opt_len, encoder->static_len));\n\n    return max_blindex;\n  }\n\n  /* ==========================================================================\r\n   * Send the header for a block using dynamic Huffman trees: the counts, the\r\n   * lengths of the bit length codes, the literal tree and the distance tree.\r\n   * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\r\n   */\n  function zip_send_all_trees(lcodes, dcodes, blcodes) {\n    // number of codes for each tree\n    var rank; // index in bl_order\n\n    //    Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n    //    Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n    //\t    \"too many codes\");\n    //    Tracev((stderr, \"\\nbl counts: \"));\n    zip_send_bits(lcodes - 257, 5); // not +255 as stated in appnote.txt\n    zip_send_bits(dcodes - 1, 5);\n    zip_send_bits(blcodes - 4, 4); // not -3 as stated in appnote.txt\n    for (rank = 0; rank < blcodes; rank++) {\n      //      Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n      zip_send_bits(zip_bl_tree[zip_bl_order[rank]].dl, 3);\n    }\n\n    // send the literal tree\n    zip_send_tree(zip_dyn_ltree, lcodes - 1);\n\n    // send the distance tree\n    zip_send_tree(zip_dyn_dtree, dcodes - 1);\n  }\n\n  /* ==========================================================================\r\n   * Determine the best encoding for the current block: dynamic trees, static\r\n   * trees or store, and output the encoded block to the zip file.\r\n   */\n  function zip_flush_block(eof) {\n    // true if this is the last block for a file\n    var opt_lenb, static_lenb; // opt_len and static_len in bytes\n    var max_blindex; // index of last bit length code of non zero freq\n    var stored_len; // length of input block\n\n    stored_len = zip_strstart - zip_block_start;\n    zip_flag_buf[zip_last_flags] = zip_flags; // Save the flags for the last 8 items\n\n    // Construct the literal and distance trees\n    zip_build_tree(zip_l_desc);\n    //    Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\",\n    //\t    encoder->opt_len, encoder->static_len));\n\n    zip_build_tree(zip_d_desc);\n    //    Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\",\n    //\t    encoder->opt_len, encoder->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\r\n     * the compressed block data, excluding the tree representations.\r\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\r\n     * in bl_order of the last bit length code to send.\r\n     */\n    max_blindex = zip_build_bl_tree();\n\n    // Determine the best encoding. Compute first the block length in bytes\n    opt_lenb = zip_opt_len + 3 + 7 >> 3;\n    static_lenb = zip_static_len + 3 + 7 >> 3;\n\n    //    Trace((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u dist %u \",\n    //\t   opt_lenb, encoder->opt_len,\n    //\t   static_lenb, encoder->static_len, stored_len,\n    //\t   encoder->last_lit, encoder->last_dist));\n\n    if (static_lenb <= opt_lenb) opt_lenb = static_lenb;\n    if (stored_len + 4 <= opt_lenb &&\n    // 4: two words for the lengths\n    zip_block_start >= 0) {\n      var i;\n\n      /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\r\n       * Otherwise we can't have processed more than WSIZE input bytes since\r\n       * the last block flush, because compression would have been\r\n       * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\r\n       * transform a block into a stored block.\r\n       */\n      zip_send_bits((zip_STORED_BLOCK << 1) + eof, 3); /* send block type */\n      zip_bi_windup(); /* align on byte boundary */\n      zip_put_short(stored_len);\n      zip_put_short(~stored_len);\n\n      // copy block\n      /*\r\n            p = &window[block_start];\r\n            for(i = 0; i < stored_len; i++)\r\n        put_byte(p[i]);\r\n      */\n      for (i = 0; i < stored_len; i++) zip_put_byte(zip_window[zip_block_start + i]);\n    } else if (static_lenb == opt_lenb) {\n      zip_send_bits((zip_STATIC_TREES << 1) + eof, 3);\n      zip_compress_block(zip_static_ltree, zip_static_dtree);\n    } else {\n      zip_send_bits((zip_DYN_TREES << 1) + eof, 3);\n      zip_send_all_trees(zip_l_desc.max_code + 1, zip_d_desc.max_code + 1, max_blindex + 1);\n      zip_compress_block(zip_dyn_ltree, zip_dyn_dtree);\n    }\n    zip_init_block();\n    if (eof != 0) zip_bi_windup();\n  }\n\n  /* ==========================================================================\r\n   * Save the match info and tally the frequency counts. Return true if\r\n   * the current block must be flushed.\r\n   */\n  function zip_ct_tally(dist,\n  // distance of matched string\n  lc) {\n    // match length-MIN_MATCH or unmatched char (if dist==0)\n    zip_l_buf[zip_last_lit++] = lc;\n    if (dist == 0) {\n      // lc is the unmatched char\n      zip_dyn_ltree[lc].fc++;\n    } else {\n      // Here, lc is the match length - MIN_MATCH\n      dist--; // dist = match distance - 1\n      //      Assert((ush)dist < (ush)MAX_DIST &&\n      //\t     (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n      //\t     (ush)D_CODE(dist) < (ush)D_CODES,  \"ct_tally: bad match\");\n\n      zip_dyn_ltree[zip_length_code[lc] + zip_LITERALS + 1].fc++;\n      zip_dyn_dtree[zip_D_CODE(dist)].fc++;\n      zip_d_buf[zip_last_dist++] = dist;\n      zip_flags |= zip_flag_bit;\n    }\n    zip_flag_bit <<= 1;\n\n    // Output the flags if they fill a byte\n    if ((zip_last_lit & 7) == 0) {\n      zip_flag_buf[zip_last_flags++] = zip_flags;\n      zip_flags = 0;\n      zip_flag_bit = 1;\n    }\n    // Try to guess if it is profitable to stop the current block here\n    if (zip_compr_level > 2 && (zip_last_lit & 0xfff) == 0) {\n      // Compute an upper bound for the compressed length\n      var out_length = zip_last_lit * 8;\n      var in_length = zip_strstart - zip_block_start;\n      var dcode;\n      for (dcode = 0; dcode < zip_D_CODES; dcode++) {\n        out_length += zip_dyn_dtree[dcode].fc * (5 + zip_extra_dbits[dcode]);\n      }\n      out_length >>= 3;\n      //      Trace((stderr,\"\\nlast_lit %u, last_dist %u, in %ld, out ~%ld(%ld%%) \",\n      //\t     encoder->last_lit, encoder->last_dist, in_length, out_length,\n      //\t     100L - out_length*100L/in_length));\n      if (zip_last_dist < parseInt(zip_last_lit / 2) && out_length < parseInt(in_length / 2)) return true;\n    }\n    return zip_last_lit == zip_LIT_BUFSIZE - 1 || zip_last_dist == zip_DIST_BUFSIZE;\n    /* We avoid equality with LIT_BUFSIZE because of wraparound at 64K\r\n     * on 16 bit machines and because stored blocks are restricted to\r\n     * 64K-1 bytes.\r\n     */\n  }\n\n  /* ==========================================================================\r\n   * Send the block data compressed using the given Huffman trees\r\n   */\n  function zip_compress_block(ltree,\n  // literal tree\n  dtree) {\n    // distance tree\n    var dist; // distance of matched string\n    var lc; // match length or unmatched char (if dist == 0)\n    var lx = 0; // running index in l_buf\n    var dx = 0; // running index in d_buf\n    var fx = 0; // running index in flag_buf\n    var flag = 0; // current flags\n    var code; // the code to send\n    var extra; // number of extra bits to send\n\n    if (zip_last_lit != 0) do {\n      if ((lx & 7) == 0) flag = zip_flag_buf[fx++];\n      lc = zip_l_buf[lx++] & 0xff;\n      if ((flag & 1) == 0) {\n        zip_SEND_CODE(lc, ltree); /* send a literal byte */\n        //\tTracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        // Here, lc is the match length - MIN_MATCH\n        code = zip_length_code[lc];\n        zip_SEND_CODE(code + zip_LITERALS + 1, ltree); // send the length code\n        extra = zip_extra_lbits[code];\n        if (extra != 0) {\n          lc -= zip_base_length[code];\n          zip_send_bits(lc, extra); // send the extra length bits\n        }\n\n        dist = zip_d_buf[dx++];\n        // Here, dist is the match distance - 1\n        code = zip_D_CODE(dist);\n        //\tAssert (code < D_CODES, \"bad d_code\");\n\n        zip_SEND_CODE(code, dtree); // send the distance code\n        extra = zip_extra_dbits[code];\n        if (extra != 0) {\n          dist -= zip_base_dist[code];\n          zip_send_bits(dist, extra); // send the extra distance bits\n        }\n      } // literal or match pair ?\n      flag >>= 1;\n    } while (lx < zip_last_lit);\n    zip_SEND_CODE(zip_END_BLOCK, ltree);\n  }\n\n  /* ==========================================================================\r\n   * Send a value on a given number of bits.\r\n   * IN assertion: length <= 16 and value fits in length bits.\r\n   */\n  var zip_Buf_size = 16; // bit size of bi_buf\n  function zip_send_bits(value,\n  // value to send\n  length) {\n    // number of bits\n    /* If not enough room in bi_buf, use (valid) bits from bi_buf and\r\n     * (16 - bi_valid) bits from value, leaving (width - (16-bi_valid))\r\n     * unused bits in value.\r\n     */\n    if (zip_bi_valid > zip_Buf_size - length) {\n      zip_bi_buf |= value << zip_bi_valid;\n      zip_put_short(zip_bi_buf);\n      zip_bi_buf = value >> zip_Buf_size - zip_bi_valid;\n      zip_bi_valid += length - zip_Buf_size;\n    } else {\n      zip_bi_buf |= value << zip_bi_valid;\n      zip_bi_valid += length;\n    }\n  }\n\n  /* ==========================================================================\r\n   * Reverse the first len bits of a code, using straightforward code (a faster\r\n   * method would use a table)\r\n   * IN assertion: 1 <= len <= 15\r\n   */\n  function zip_bi_reverse(code,\n  // the value to invert\n  len) {\n    // its bit length\n    var res = 0;\n    do {\n      res |= code & 1;\n      code >>= 1;\n      res <<= 1;\n    } while (--len > 0);\n    return res >> 1;\n  }\n\n  /* ==========================================================================\r\n   * Write out any remaining bits in an incomplete byte.\r\n   */\n  function zip_bi_windup() {\n    if (zip_bi_valid > 8) {\n      zip_put_short(zip_bi_buf);\n    } else if (zip_bi_valid > 0) {\n      zip_put_byte(zip_bi_buf);\n    }\n    zip_bi_buf = 0;\n    zip_bi_valid = 0;\n  }\n  function zip_qoutbuf() {\n    if (zip_outcnt != 0) {\n      var q, i;\n      q = zip_new_queue();\n      if (zip_qhead == null) zip_qhead = zip_qtail = q;else zip_qtail = zip_qtail.next = q;\n      q.len = zip_outcnt - zip_outoff;\n      //      System.arraycopy(zip_outbuf, zip_outoff, q.ptr, 0, q.len);\n      for (i = 0; i < q.len; i++) q.ptr[i] = zip_outbuf[zip_outoff + i];\n      zip_outcnt = zip_outoff = 0;\n    }\n  }\n  return function deflate(str, level) {\n    var i, j;\n    zip_deflate_data = str;\n    zip_deflate_pos = 0;\n    if (typeof level == 'undefined') level = zip_DEFAULT_LEVEL;\n    zip_deflate_start(level);\n    var buff = new Array(1024);\n    var aout = [];\n    while ((i = zip_deflate_internal(buff, 0, buff.length)) > 0) {\n      var cbuf = new Array(i);\n      for (j = 0; j < i; j++) {\n        cbuf[j] = String.fromCharCode(buff[j]);\n      }\n      aout[aout.length] = cbuf.join('');\n    }\n    zip_deflate_data = null; // G.C.\n    return aout.join('');\n  };\n}();\n\n//# sourceURL=webpack://@k2works/full-stack-lab/./src/lib.js?");

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[1].use[1]!./src/style.css":
/*!*****************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[1].use[1]!./src/style.css ***!
  \*****************************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/sourceMaps.js */ \"./node_modules/css-loader/dist/runtime/sourceMaps.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"html,\\r\\nbody {\\r\\n  height: 100%;\\r\\n}\\r\\n\\r\\nbody {\\r\\n  margin: 10;\\r\\n  padding: 10;\\r\\n  font-family: -apple-system, \\\"游ゴシック Medium\\\", \\\"Yu Gothic Medium\\\",\\r\\n    \\\"游ゴシック体\\\", YuGothic, \\\"ヒラギノ角ゴ Pro W3\\\", \\\"Hiragino Kaku Gothic ProN\\\",\\r\\n    \\\"メイリオ\\\", Meiryo, sans-serif;\\r\\n  font-feature-settings: \\\"palt\\\"; /* プロポーショナルメトリクスを有効に */\\r\\n}\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/style.css\"],\"names\":[],\"mappings\":\"AAAA;;EAEE,YAAY;AACd;;AAEA;EACE,UAAU;EACV,WAAW;EACX;;8BAE4B;EAC5B,6BAA6B,EAAE,sBAAsB;AACvD\",\"sourcesContent\":[\"html,\\r\\nbody {\\r\\n  height: 100%;\\r\\n}\\r\\n\\r\\nbody {\\r\\n  margin: 10;\\r\\n  padding: 10;\\r\\n  font-family: -apple-system, \\\"游ゴシック Medium\\\", \\\"Yu Gothic Medium\\\",\\r\\n    \\\"游ゴシック体\\\", YuGothic, \\\"ヒラギノ角ゴ Pro W3\\\", \\\"Hiragino Kaku Gothic ProN\\\",\\r\\n    \\\"メイリオ\\\", Meiryo, sans-serif;\\r\\n  font-feature-settings: \\\"palt\\\"; /* プロポーショナルメトリクスを有効に */\\r\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\n/* harmony default export */ __webpack_exports__[\"default\"] = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://@k2works/full-stack-lab/./src/style.css?./node_modules/css-loader/dist/cjs.js??ruleSet%5B1%5D.rules%5B1%5D.use%5B1%5D");

/***/ }),

/***/ "./src/style.css":
/*!***********************!*\
  !*** ./src/style.css ***!
  \***********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleDomAPI.js */ \"./node_modules/style-loader/dist/runtime/styleDomAPI.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertBySelector.js */ \"./node_modules/style-loader/dist/runtime/insertBySelector.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ \"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertStyleElement.js */ \"./node_modules/style-loader/dist/runtime/insertStyleElement.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleTagTransform.js */ \"./node_modules/style-loader/dist/runtime/styleTagTransform.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_1_use_1_style_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[1].use[1]!./style.css */ \"./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[1].use[1]!./src/style.css\");\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());\noptions.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());\n\n      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, \"head\");\n    \noptions.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());\noptions.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_1_use_1_style_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"], options);\n\n\n\n\n       /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_1_use_1_style_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"] && _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_1_use_1_style_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals ? _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_1_use_1_style_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals : undefined);\n\n\n//# sourceURL=webpack://@k2works/full-stack-lab/./src/style.css?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ (function(module) {

"use strict";
eval("\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};\n\n//# sourceURL=webpack://@k2works/full-stack-lab/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ (function(module) {

"use strict";
eval("\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;\n\n//# sourceURL=webpack://@k2works/full-stack-lab/./node_modules/style-loader/dist/runtime/insertBySelector.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ (function(module) {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;\n\n//# sourceURL=webpack://@k2works/full-stack-lab/./node_modules/style-loader/dist/runtime/insertStyleElement.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce =  true ? __webpack_require__.nc : 0;\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;\n\n//# sourceURL=webpack://@k2works/full-stack-lab/./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ (function(module) {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n  var needLayer = typeof obj.layer !== \"undefined\";\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += \"}\";\n  }\n  if (obj.media) {\n    css += \"}\";\n  }\n  if (obj.supports) {\n    css += \"}\";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === \"undefined\") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;\n\n//# sourceURL=webpack://@k2works/full-stack-lab/./node_modules/style-loader/dist/runtime/styleDomAPI.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ (function(module) {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;\n\n//# sourceURL=webpack://@k2works/full-stack-lab/./node_modules/style-loader/dist/runtime/styleTagTransform.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	!function() {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/app.js");
/******/ 	
/******/ })()
;